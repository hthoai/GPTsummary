{"Flowchart": "---\ntitle: Flowcharts Syntax\n---\n\n# Flowcharts - Basic Syntax\n\nFlowcharts are composed of **nodes** (geometric shapes) and **edges** (arrows or lines). The Mermaid code defines how nodes and edges are made and accommodates different arrow types, multi-directional arrows, and any linking to and from subgraphs.\n\n```warning\nIf you are using the word \"end\" in a Flowchart node, capitalize the entire word or any of the letters (e.g., \"End\" or \"END\"), or apply this [workaround](https://github.com/mermaid-js/mermaid/issues/1444#issuecomment-639528897). Typing \"end\" in all lowercase letters will break the Flowchart.\n```\n\n```warning\nIf you are using the letter \"o\" or \"x\" as the first letter in a connecting Flowchart node, add a space before the letter or capitalize the letter (e.g., \"dev--- ops\", \"dev---Ops\").\n\nTyping \"A---oB\" will create a [circle edge](#circle-edge-example).\n\nTyping \"A---xB\" will create a [cross edge](#cross-edge-example).\n```\n\n### A node (default)\n\n```mermaid-example\n---\ntitle: Node\n---\nflowchart LR\n    id\n```\n\n```note\nThe id is what is displayed in the box.\n```\n\n```tip\nInstead of `flowchart` one can also use `graph`.\n```\n\n### A node with text\n\nIt is also possible to set text in the box that differs from the id. If this is done several times, it is the last text\nfound for the node that will be used. Also if you define edges for the node later on, you can omit text definitions. The\none previously defined will be used when rendering the box.\n\n```mermaid-example\n---\ntitle: Node with text\n---\nflowchart LR\n    id1[This is the text in the box]\n```\n\n#### Unicode text\n\nUse `\"` to enclose the unicode text.\n\n```mermaid-example\nflowchart LR\n    id[\"This ❤ Unicode\"]\n```\n\n#### Markdown formatting\n\nUse double quotes and backticks \"\\` text \\`\" to enclose the markdown text.\n\n```mermaid-example\n%%{init: {\"flowchart\": {\"htmlLabels\": false}} }%%\nflowchart LR\n    markdown[\"`This **is** _Markdown_`\"]\n    newLines[\"`Line1\n    Line 2\n    Line 3`\"]\n    markdown --> newLines\n```\n\n### Direction\n\nThis statement declares the direction of the Flowchart.\n\nThis declares the flowchart is oriented from top to bottom (`TD` or `TB`).\n\n```mermaid-example\nflowchart TD\n    Start --> Stop\n```\n\nThis declares the flowchart is oriented from left to right (`LR`).\n\n```mermaid-example\nflowchart LR\n    Start --> Stop\n```\n\nPossible FlowChart orientations are:\n\n- TB - Top to bottom\n- TD - Top-down/ same as top to bottom\n- BT - Bottom to top\n- RL - Right to left\n- LR - Left to right\n\n## Node shapes\n\n### A node with round edges\n\n```mermaid-example\nflowchart LR\n    id1(This is the text in the box)\n```\n\n### A stadium-shaped node\n\n```mermaid-example\nflowchart LR\n    id1([This is the text in the box])\n```\n\n### A node in a subroutine shape\n\n```mermaid-example\nflowchart LR\n    id1[[This is the text in the box]]\n```\n\n### A node in a cylindrical shape\n\n```mermaid-example\nflowchart LR\n    id1[(Database)]\n```\n\n### A node in the form of a circle\n\n```mermaid-example\nflowchart LR\n    id1((This is the text in the circle))\n```\n\n### A node in an asymmetric shape\n\n```mermaid-example\nflowchart LR\n    id1>This is the text in the box]\n```\n\nCurrently only the shape above is possible and not its mirror. _This might change with future releases._\n\n### A node (rhombus)\n\n```mermaid-example\nflowchart LR\n    id1{This is the text in the box}\n```\n\n### A hexagon node\n\n```mermaid-example\nflowchart LR\n    id1{{This is the text in the box}}\n```\n\n### Parallelogram\n\n```mermaid-example\nflowchart TD\n    id1[/This is the text in the box/]\n```\n\n### Parallelogram alt\n\n```mermaid-example\nflowchart TD\n    id1[\\This is the text in the box\\]\n```\n\n### Trapezoid\n\n```mermaid-example\nflowchart TD\n    A[/Christmas\\]\n```\n\n### Trapezoid alt\n\n```mermaid-example\nflowchart TD\n    B[\\Go shopping/]\n```\n\n### Double circle\n\n```mermaid-example\nflowchart TD\n    id1(((This is the text in the circle)))\n```\n\n## Links between nodes\n\nNodes can be connected with links/edges. It is possible to have different types of links or attach a text string to a link.\n\n### A link with arrow head\n\n```mermaid-example\nflowchart LR\n    A-->B\n```\n\n### An open link\n\n```mermaid-example\nflowchart LR\n    A --- B\n```\n\n### Text on links\n\n```mermaid-example\nflowchart LR\n    A-- This is the text! ---B\n```\n\nor\n\n```mermaid-example\nflowchart LR\n    A---|This is the text|B\n```\n\n### A link with arrow head and text\n\n```mermaid-example\nflowchart LR\n    A-->|text|B\n```\n\nor\n\n```mermaid-example\nflowchart LR\n    A-- text -->B\n```\n\n### Dotted link\n\n```mermaid-example\nflowchart LR\n   A-.->B;\n```\n\n### Dotted link with text\n\n```mermaid-example\nflowchart LR\n   A-. text .-> B\n```\n\n### Thick link\n\n```mermaid-example\nflowchart LR\n   A ==> B\n```\n\n### Thick link with text\n\n```mermaid-example\nflowchart LR\n   A == text ==> B\n```\n\n### An invisible link\n\nThis can be a useful tool in some instances where you want to alter the default positioning of a node.\n\n```mermaid-example\nflowchart LR\n    A ~~~ B\n```\n\n### Chaining of links\n\nIt is possible declare many links in the same line as per below:\n\n```mermaid-example\nflowchart LR\n   A -- text --> B -- text2 --> C\n```\n\nIt is also possible to declare multiple nodes links in the same line as per below:\n\n```mermaid-example\nflowchart LR\n   a --> b & c--> d\n```\n\nYou can then describe dependencies in a very expressive way. Like the one-liner below:\n\n```mermaid-example\nflowchart TB\n    A & B--> C & D\n```\n\nIf you describe the same diagram using the basic syntax, it will take four lines. A\nword of warning, one could go overboard with this making the flowchart harder to read in\nmarkdown form. The Swedish word `lagom` comes to mind. It means, not too much and not too little.\nThis goes for expressive syntaxes as well.\n\n```mermaid\nflowchart TB\n    A --> C\n    A --> D\n    B --> C\n    B --> D\n```\n\n## New arrow types\n\nThere are new types of arrows supported:\n\n- circle edge\n- cross edge\n\n### Circle edge example\n\n```mermaid-example\nflowchart LR\n    A --o B\n```\n\n### Cross edge example\n\n```mermaid-example\nflowchart LR\n    A --x B\n```\n\n## Multi directional arrows\n\nThere is the possibility to use multidirectional arrows.\n\n```mermaid-example\nflowchart LR\n    A o--o B\n    B <--> C\n    C x--x D\n```\n\n### Minimum length of a link\n\nEach node in the flowchart is ultimately assigned to a rank in the rendered\ngraph, i.e. to a vertical or horizontal level (depending on the flowchart\norientation), based on the nodes to which it is linked. By default, links\ncan span any number of ranks, but you can ask for any link to be longer\nthan the others by adding extra dashes in the link definition.\n\nIn the following example, two extra dashes are added in the link from node _B_\nto node _E_, so that it spans two more ranks than regular links:\n\n```mermaid-example\nflowchart TD\n    A[Start] --> B{Is it?}\n    B -->|Yes| C[OK]\n    C --> D[Rethink]\n    D --> B\n    B ---->|No| E[End]\n```\n\n> **Note** Links may still be made longer than the requested number of ranks\n> by the rendering engine to accommodate other requests.\n\nWhen the link label is written in the middle of the link, the extra dashes must\nbe added on the right side of the link. The following example is equivalent to\nthe previous one:\n\n```mermaid-example\nflowchart TD\n    A[Start] --> B{Is it?}\n    B -- Yes --> C[OK]\n    C --> D[Rethink]\n    D --> B\n    B -- No ----> E[End]\n```\n\nFor dotted or thick links, the characters to add are equals signs or dots,\nas summed up in the following table:\n\n| Length            |   1    |    2    |    3     |\n| ----------------- | :----: | :-----: | :------: |\n| Normal            | `---`  | `----`  | `-----`  |\n| Normal with arrow | `-->`  | `--->`  | `---->`  |\n| Thick             | `===`  | `====`  | `=====`  |\n| Thick with arrow  | `==>`  | `===>`  | `====>`  |\n| Dotted            | `-.-`  | `-..-`  | `-...-`  |\n| Dotted with arrow | `-.->` | `-..->` | `-...->` |\n\n## Special characters that break syntax\n\nIt is possible to put text within quotes in order to render more troublesome characters. As in the example below:\n\n```mermaid-example\nflowchart LR\n    id1[\"This is the (text) in the box\"]\n```\n\n### Entity codes to escape characters\n\nIt is possible to escape characters using the syntax exemplified here.\n\n```mermaid-example\n    flowchart LR\n        A[\"A double quote:#quot;\"] --> B[\"A dec char:#9829;\"]\n```\n\nNumbers given are base 10, so `#` can be encoded as `#35;`. It is also supported to use HTML character names.\n\n## Subgraphs\n\n```\nsubgraph title\n    graph definition\nend\n```\n\nAn example below:\n\n```mermaid-example\nflowchart TB\n    c1-->a2\n    subgraph one\n    a1-->a2\n    end\n    subgraph two\n    b1-->b2\n    end\n    subgraph three\n    c1-->c2\n    end\n```\n\nYou can also set an explicit id for the subgraph.\n\n```mermaid-example\nflowchart TB\n    c1-->a2\n    subgraph ide1 [one]\n    a1-->a2\n    end\n```\n\n### flowcharts\n\nWith the graphtype flowchart it is also possible to set edges to and from subgraphs as in the flowchart below.\n\n```mermaid-example\nflowchart TB\n    c1-->a2\n    subgraph one\n    a1-->a2\n    end\n    subgraph two\n    b1-->b2\n    end\n    subgraph three\n    c1-->c2\n    end\n    one --> two\n    three --> two\n    two --> c2\n```\n\n### Direction in subgraphs\n\nWith the graphtype flowcharts you can use the direction statement to set the direction which the subgraph will render like in this example.\n\n```mermaid-example\nflowchart LR\n  subgraph TOP\n    direction TB\n    subgraph B1\n        direction RL\n        i1 -->f1\n    end\n    subgraph B2\n        direction BT\n        i2 -->f2\n    end\n  end\n  A --> TOP --> B\n  B1 --> B2\n```\n\n#### Limitation\n\nIf any of a subgraph's nodes are linked to the outside, subgraph direction will be ignored. Instead the subgraph will inherit the direction of the parent graph:\n\n```mermaid-example\nflowchart LR\n    subgraph subgraph1\n        direction TB\n        top1[top] --> bottom1[bottom]\n    end\n    subgraph subgraph2\n        direction TB\n        top2[top] --> bottom2[bottom]\n    end\n    %% ^ These subgraphs are identical, except for the links to them:\n\n    %% Link *to* subgraph1: subgraph1 direction is maintained\n    outside --> subgraph1\n    %% Link *within* subgraph2:\n    %% subgraph2 inherits the direction of the top-level graph (LR)\n    outside ---> top2\n```\n\n## Markdown Strings\n\nThe \"Markdown Strings\" feature enhances flowcharts and mind maps by offering a more versatile string type, which supports text formatting options such as bold and italics, and automatically wraps text within labels.\n\n```mermaid-example\n%%{init: {\"flowchart\": {\"htmlLabels\": false}} }%%\nflowchart LR\nsubgraph \"One\"\n  a(\"`The **cat**\n  in the hat`\") -- \"edge label\" --> b{{\"`The **dog** in the hog`\"}}\nend\nsubgraph \"`**Two**`\"\n  c(\"`The **cat**\n  in the hat`\") -- \"`Bold **edge label**`\" --> d(\"The dog in the hog\")\nend\n```\n\nFormatting:\n\n- For bold text, use double asterisks (`**`) before and after the text.\n- For italics, use single asterisks (`*`) before and after the text.\n- With traditional strings, you needed to add `<br>` tags for text to wrap in nodes. However, markdown strings automatically wrap text when it becomes too long and allows you to start a new line by simply using a newline character instead of a `<br>` tag.\n\nThis feature is applicable to node labels, edge labels, and subgraph labels.\n\nThe auto wrapping can be disabled by using\n\n```\n---\nconfig:\n  markdownAutoWrap: false\n---\ngraph LR\n```\n\n## Interaction\n\nIt is possible to bind a click event to a node, the click can lead to either a javascript callback or to a link which will be opened in a new browser tab.\n\n```note\nThis functionality is disabled when using `securityLevel='strict'` and enabled when using `securityLevel='loose'`.\n```\n\n```\nclick nodeId callback\nclick nodeId call callback()\n```\n\n- nodeId is the id of the node\n- callback is the name of a javascript function defined on the page displaying the graph, the function will be called with the nodeId as parameter.\n\nExamples of tooltip usage below:\n\n```html\n<script>\n  window.callback = function () {\n    alert('A callback was triggered');\n  };\n</script>\n```\n\nThe tooltip text is surrounded in double quotes. The styles of the tooltip are set by the class `.mermaidTooltip`.\n\n```mermaid-example\nflowchart LR\n    A-->B\n    B-->C\n    C-->D\n    click A callback \"Tooltip for a callback\"\n    click B \"https://www.github.com\" \"This is a tooltip for a link\"\n    click C call callback() \"Tooltip for a callback\"\n    click D href \"https://www.github.com\" \"This is a tooltip for a link\"\n```\n\n> **Success** The tooltip functionality and the ability to link to urls are available from version 0.5.2.\n\n?> Due to limitations with how Docsify handles JavaScript callback functions, an alternate working demo for the above code can be viewed at [this jsfiddle](https://jsfiddle.net/yk4h7qou/2/).\n\nLinks are opened in the same browser tab/window by default. It is possible to change this by adding a link target to the click definition (`_self`, `_blank`, `_parent` and `_top` are supported):\n\n```mermaid-example\nflowchart LR\n    A-->B\n    B-->C\n    C-->D\n    D-->E\n    click A \"https://www.github.com\" _blank\n    click B \"https://www.github.com\" \"Open this in a new tab\" _blank\n    click C href \"https://www.github.com\" _blank\n    click D href \"https://www.github.com\" \"Open this in a new tab\" _blank\n```\n\nBeginner's tip—a full example using interactive links in a html context:\n\n```html\n<body>\n  <pre class=\"mermaid\">\n    flowchart LR\n        A-->B\n        B-->C\n        C-->D\n        click A callback \"Tooltip\"\n        click B \"https://www.github.com\" \"This is a link\"\n        click C call callback() \"Tooltip\"\n        click D href \"https://www.github.com\" \"This is a link\"\n  </pre>\n\n  <script>\n    window.callback = function () {\n      alert('A callback was triggered');\n    };\n    const config = {\n      startOnLoad: true,\n      flowchart: { useMaxWidth: true, htmlLabels: true, curve: 'cardinal' },\n      securityLevel: 'loose',\n    };\n    mermaid.initialize(config);\n  </script>\n</body>\n```\n\n### Comments\n\nComments can be entered within a flow diagram, which will be ignored by the parser. Comments need to be on their own line, and must be prefaced with `%%` (double percent signs). Any text after the start of the comment to the next newline will be treated as a comment, including any flow syntax\n\n```mermaid\nflowchart LR\n%% this is a comment A -- text --> B{node}\n   A -- text --> B -- text2 --> C\n```\n\n## Styling and classes\n\n### Styling links\n\nIt is possible to style links. For instance, you might want to style a link that is going backwards in the flow. As links\nhave no ids in the same way as nodes, some other way of deciding what style the links should be attached to is required.\nInstead of ids, the order number of when the link was defined in the graph is used, or use default to apply to all links.\nIn the example below the style defined in the linkStyle statement will belong to the fourth link in the graph:\n\n```\nlinkStyle 3 stroke:#ff3,stroke-width:4px,color:red;\n```\n\nIt is also possible to add style to multiple links in a single statement, by separating link numbers with commas:\n\n```\nlinkStyle 1,2,7 color:blue;\n```\n\n### Styling line curves\n\nIt is possible to style the type of curve used for lines between items, if the default method does not meet your needs.\nAvailable curve styles include `basis`, `bumpX`, `bumpY`, `cardinal`, `catmullRom`, `linear`, `monotoneX`, `monotoneY`,\n`natural`, `step`, `stepAfter`, and `stepBefore`.\n\nIn this example, a left-to-right graph uses the `stepBefore` curve style:\n\n```\n%%{ init: { 'flowchart': { 'curve': 'stepBefore' } } }%%\ngraph LR\n```\n\nFor a full list of available curves, including an explanation of custom curves, refer to\nthe [Shapes](https://github.com/d3/d3-shape/blob/main/README.md#curves) documentation in the\n[d3-shape](https://github.com/d3/d3-shape/) project.\n\n### Styling a node\n\nIt is possible to apply specific styles such as a thicker border or a different background color to a node.\n\n```mermaid-example\nflowchart LR\n    id1(Start)-->id2(Stop)\n    style id1 fill:#f9f,stroke:#333,stroke-width:4px\n    style id2 fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5\n```\n\n#### Classes\n\nMore convenient than defining the style every time is to define a class of styles and attach this class to the nodes that\nshould have a different look.\n\nA class definition looks like the example below:\n\n```\n    classDef className fill:#f9f,stroke:#333,stroke-width:4px;\n```\n\nAlso, it is possible to define style to multiple classes in one statement:\n\n```\n    classDef firstClassName,secondClassName font-size:12pt;\n```\n\nAttachment of a class to a node is done as per below:\n\n```\n    class nodeId1 className;\n```\n\nIt is also possible to attach a class to a list of nodes in one statement:\n\n```\n    class nodeId1,nodeId2 className;\n```\n\nA shorter form of adding a class is to attach the classname to the node using the `:::`operator as per below:\n\n```mermaid-example\nflowchart LR\n    A:::someclass --> B\n    classDef someclass fill:#f96\n```\n\nThis form can be used when declaring multiple links between nodes:\n\n```mermaid-example\nflowchart LR\n    A:::foo & B:::bar --> C:::foobar\n    classDef foo stroke:#f00\n    classDef bar stroke:#0f0\n    classDef foobar stroke:#00f\n```\n\n### CSS classes\n\nIt is also possible to predefine classes in CSS styles that can be applied from the graph definition as in the example\nbelow:\n\n**Example style**\n\n```html\n<style>\n  .cssClass > rect {\n    fill: #ff0000;\n    stroke: #ffff00;\n    stroke-width: 4px;\n  }\n</style>\n```\n\n**Example definition**\n\n```mermaid-example\nflowchart LR\n    A-->B[AAA<span>BBB</span>]\n    B-->D\n    class A cssClass\n```\n\n### Default class\n\nIf a class is named default it will be assigned to all classes without specific class definitions.\n\n```\n    classDef default fill:#f9f,stroke:#333,stroke-width:4px;\n```\n\n## Basic support for fontawesome\n\nIt is possible to add icons from fontawesome.\n\nThe icons are accessed via the syntax fa:#icon class name#.\n\n```mermaid-example\nflowchart TD\n    B[\"fa:fa-twitter for peace\"]\n    B-->C[fa:fa-ban forbidden]\n    B-->D(fa:fa-spinner)\n    B-->E(A fa:fa-camera-retro perhaps?)\n```\n\nMermaid supports Font Awesome if the CSS is included on the website.\nMermaid does not have any restriction on the version of Font Awesome that can be used.\n\nPlease refer the [Official Font Awesome Documentation](https://fontawesome.com/start) on how to include it in your website.\n\nAdding this snippet in the `<head>` would add support for Font Awesome v6.5.1\n\n```html\n<link\n  href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css\"\n  rel=\"stylesheet\"\n/>\n```\n\n### Custom icons\n\nIt is possible to use custom icons served from Font Awesome as long as the website imports the corresponding kit.\n\nNote that this is currently a paid feature from Font Awesome.\n\nFor custom icons, you need to use the `fak` prefix.\n\n**Example**\n\n```\nflowchart TD\n    B[fa:fa-twitter] %% standard icon\n    B-->E(fak:fa-custom-icon-name) %% custom icon\n```\n\nAnd trying to render it\n\n```mermaid-example\nflowchart TD\n    B[\"fa:fa-twitter for peace\"]\n    B-->C[\"fab:fa-truck-bold a custom icon\"]\n```\n\n## Graph declarations with spaces between vertices and link and without semicolon\n\n- In graph declarations, the statements also can now end without a semicolon. After release 0.2.16, ending a graph statement with semicolon is just optional. So the below graph declaration is also valid along with the old declarations of the graph.\n\n- A single space is allowed between vertices and the link. However there should not be any space between a vertex and its text and a link and its text. The old syntax of graph declaration will also work and hence this new feature is optional and is introduced to improve readability.\n\nBelow is the new declaration of the graph edges which is also valid along with the old declaration of the graph edges.\n\n```mermaid-example\nflowchart LR\n    A[Hard edge] -->|Link text| B(Round edge)\n    B --> C{Decision}\n    C -->|One| D[Result one]\n    C -->|Two| E[Result two]\n```\n\n## Configuration\n\n### Renderer\n\nThe layout of the diagram is done with the renderer. The default renderer is dagre.\n\nStarting with Mermaid version 9.4, you can use an alternate renderer named elk. The elk renderer is better for larger and/or more complex diagrams.\n\nThe _elk_ renderer is an experimental feature.\nYou can change the renderer to elk by adding this directive:\n\n```\n%%{init: {\"flowchart\": {\"defaultRenderer\": \"elk\"}} }%%\n```\n\n```note\nNote that the site needs to use mermaid version 9.4+ for this to work and have this featured enabled in the lazy-loading configuration.\n```\n\n### Width\n\nIt is possible to adjust the width of the rendered flowchart.\n\nThis is done by defining **mermaid.flowchartConfig** or by the CLI to use a JSON file with the configuration. How to use the CLI is described in the mermaidCLI page.\nmermaid.flowchartConfig can be set to a JSON string with config parameters or the corresponding object.\n\n```javascript\nmermaid.flowchartConfig = {\n    width: 100%\n}\n```\n\n<!--- cspell:ignore lagom --->\n", "Block Diagram": "---\ntitle: Block Diagram Syntax\noutline: 'deep' # shows all h3 headings in outline in Vitepress\n---\n\n# Block Diagrams Documentation\n\n## Introduction to Block Diagrams\n\n```mermaid\nblock-beta\ncolumns 1\n  db((\"DB\"))\n  blockArrowId6<[\"&nbsp;&nbsp;&nbsp;\"]>(down)\n  block:ID\n    A\n    B[\"A wide one in the middle\"]\n    C\n  end\n  space\n  D\n  ID --> D\n  C --> D\n  style B fill:#969,stroke:#333,stroke-width:4px\n```\n\n### Definition and Purpose\n\nBlock diagrams are an intuitive and efficient way to represent complex systems, processes, or architectures visually. They are composed of blocks and connectors, where blocks represent the fundamental components or functions, and connectors show the relationship or flow between these components. This method of diagramming is essential in various fields such as engineering, software development, and process management.\n\nThe primary purpose of block diagrams is to provide a high-level view of a system, allowing for easy understanding and analysis without delving into the intricate details of each component. This makes them particularly useful for simplifying complex systems and for explaining the overall structure and interaction of components within a system.\n\nMany people use mermaid flowcharts for this purpose. A side-effect of this is that the automatic layout sometimes move shapes to positions that the diagram maker does not want. Block diagrams use a different approach. In this diagram we give the author full control over where the shapes are positioned.\n\n### General Use Cases\n\nBlock diagrams have a wide range of applications across various industries and disciplines. Some of the key use cases include:\n\n- **Software Architecture**: In software development, block diagrams can be used to illustrate the architecture of a software application. This includes showing how different modules or services interact, data flow, and high-level component interaction.\n\n- **Network Diagrams**: Block diagrams are ideal for representing network architectures in IT and telecommunications. They can depict how different network devices and services are interconnected, including routers, switches, firewalls, and the flow of data across the network.\n\n- **Process Flowcharts**: In business and manufacturing, block diagrams can be employed to create process flowcharts. These flowcharts represent various stages of a business or manufacturing process, helping to visualize the sequence of steps, decision points, and the flow of control.\n\n- **Electrical Systems**: Engineers use block diagrams to represent electrical systems and circuitry. They can illustrate the high-level structure of an electrical system, the interaction between different electrical components, and the flow of electrical currents.\n\n- **Educational Purposes**: Block diagrams are also extensively used in educational materials to explain complex concepts and systems in a simplified manner. They help in breaking down and visualizing scientific theories, engineering principles, and technological systems.\n\nThese examples demonstrate the versatility of block diagrams in providing clear and concise representations of complex systems. Their simplicity and clarity make them a valuable tool for professionals across various fields to communicate complex ideas effectively.\n\nIn the following sections, we will delve into the specifics of creating and manipulating block diagrams using Mermaid, covering everything from basic syntax to advanced configurations and styling.\n\nCreating block diagrams with Mermaid is straightforward and accessible. This section introduces the basic syntax and structure needed to start building simple diagrams. Understanding these foundational concepts is key to efficiently utilizing Mermaid for more complex diagramming tasks.\n\n### Simple Block Diagrams\n\n#### Basic Structure\n\nAt its core, a block diagram consists of blocks representing different entities or components. In Mermaid, these blocks are easily created using simple text labels. The most basic form of a block diagram can be a series of blocks without any connectors.\n\n**Example - Simple Block Diagram**:\nTo create a simple block diagram with three blocks labeled 'a', 'b', and 'c', the syntax is as follows:\n\n```mermaid-example\nblock-beta\n  a b c\n```\n\nThis example will produce a horizontal sequence of three blocks. Each block is automatically spaced and aligned for optimal readability.\n\n### Defining the number of columns to use\n\n#### Column Usage\n\nWhile simple block diagrams are linear and straightforward, more complex systems may require a structured layout. Mermaid allows for the organization of blocks into multiple columns, facilitating the creation of more intricate and detailed diagrams.\n\n**Example - Multi-Column Diagram:**\nIn scenarios where you need to distribute blocks across multiple columns, you can specify the number of columns and arrange the blocks accordingly. Here's how to create a block diagram with three columns and four blocks, where the fourth block appears in a second row:\n\n```mermaid-example\nblock-beta\n  columns 3\n  a b c d\n```\n\nThis syntax instructs Mermaid to arrange the blocks 'a', 'b', 'c', and 'd' across three columns, wrapping to the next row as needed. This feature is particularly useful for representing layered or multi-tiered systems, such as network layers or hierarchical structures.\n\nThese basic building blocks of Mermaid's block diagrams provide a foundation for more complex diagramming. The simplicity of the syntax allows for quick creation and iteration of diagrams, making it an efficient tool for visualizing ideas and concepts. In the next section, we'll explore advanced block configuration options, including setting block widths and creating composite blocks.\n\n## 3. Advanced Block Configuration\n\nBuilding upon the basics, this section delves into more advanced features of block diagramming in Mermaid. These features allow for greater flexibility and complexity in diagram design, accommodating a wider range of use cases and scenarios.\n\n### Setting Block Width\n\n#### Spanning Multiple Columns\n\nIn more complex diagrams, you may need blocks that span multiple columns to emphasize certain components or to represent larger entities. Mermaid allows for the adjustment of block widths to cover multiple columns, enhancing the diagram's readability and structure.\n\n**Example - Block Spanning Multiple Columns**:\nTo create a block diagram where one block spans across two columns, you can specify the desired width for each block:\n\n```mermaid-example\nblock-beta\n  columns 3\n  a[\"A label\"] b:2 c:2 d\n```\n\nIn this example, the block labeled \"A wide one\" spans two columns, while blocks 'b', 'c', and 'd' are allocated their own columns. This flexibility in block sizing is crucial for accurately representing systems with components of varying significance or size.\n\n### Creating Composite Blocks\n\n#### Nested Blocks\n\nComposite blocks, or blocks within blocks, are an advanced feature in Mermaid's block diagram syntax. They allow for the representation of nested or hierarchical systems, where one component encompasses several subcomponents.\n\n**Example - Composite Blocks:**\nCreating a composite block involves defining a parent block and then nesting other blocks within it. Here's how to define a composite block with nested elements:\n\n```mermaid-example\nblock-beta\n    block\n      D\n    end\n    A[\"A: I am a wide one\"]\n```\n\nIn this syntax, 'D' is a nested block within a larger parent block. This feature is particularly useful for depicting complex structures, such as a server with multiple services or a department within a larger organizational framework.\n\n### Column Width Dynamics\n\n#### Adjusting Widths\n\nMermaid also allows for dynamic adjustment of column widths based on the content of the blocks. The width of the columns is determined by the widest block in the column, ensuring that the diagram remains balanced and readable.\n\n**Example - Dynamic Column Widths:**\nIn diagrams with varying block sizes, Mermaid automatically adjusts the column widths to fit the largest block in each column. Here's an example:\n\n```mermaid-example\nblock-beta\n  columns 3\n  a:3\n  block:group1:2\n    columns 2\n    h i j k\n  end\n  g\n  block:group2:3\n    %% columns auto (default)\n    l m n o p q r\n  end\n```\n\nThis example demonstrates how Mermaid dynamically adjusts the width of the columns to accommodate the widest block, in this case, 'a' and the composite block 'e'. This dynamic adjustment is essential for creating visually balanced and easy-to-understand diagrams.\n\nWith these advanced configuration options, Mermaid's block diagrams can be tailored to represent a wide array of complex systems and structures. The flexibility offered by these features enables users to create diagrams that are both informative and visually appealing. In the following sections, we will explore further capabilities, including different block shapes and linking options.\n\n## 4. Block Varieties and Shapes\n\nMermaid's block diagrams are not limited to standard rectangular shapes. A variety of block shapes are available, allowing for a more nuanced and tailored representation of different types of information or entities. This section outlines the different block shapes you can use in Mermaid and their specific applications.\n\n### Standard and Special Block Shapes\n\nMermaid supports a range of block shapes to suit different diagramming needs, from basic geometric shapes to more specialized forms.\n\n#### Example - Round Edged Block\n\nTo create a block with round edges, which can be used to represent a softer or more flexible component:\n\n```mermaid-example\nblock-beta\n    id1(\"This is the text in the box\")\n```\n\n#### Example - Stadium-Shaped Block\n\nA stadium-shaped block, resembling an elongated circle, can be used for components that are process-oriented:\n\n```mermaid-example\nblock-beta\n    id1([\"This is the text in the box\"])\n```\n\n#### Example - Subroutine Shape\n\nFor representing subroutines or contained processes, a block with double vertical lines is useful:\n\n```mermaid-example\nblock-beta\n    id1[[\"This is the text in the box\"]]\n```\n\n#### Example - Cylindrical Shape\n\nThe cylindrical shape is ideal for representing databases or storage components:\n\n```mermaid-example\nblock-beta\n    id1[(\"Database\")]\n```\n\n#### Example - Circle Shape\n\nA circle can be used for centralized or pivotal components:\n\n```mermaid-example\nblock-beta\n    id1((\"This is the text in the circle\"))\n```\n\n#### Example - Asymmetric, Rhombus, and Hexagon Shapes\n\nFor decision points, use a rhombus, and for unique or specialized processes, asymmetric and hexagon shapes can be utilized:\n\n**Asymmetric**\n\n```mermaid-example\nblock-beta\n  id1>\"This is the text in the box\"]\n```\n\n**Rhombus**\n\n```mermaid-example\nblock-beta\n    id1{\"This is the text in the box\"}\n```\n\n**Hexagon**\n\n```mermaid-example\nblock-beta\n    id1{{\"This is the text in the box\"}}\n```\n\n#### Example - Parallelogram and Trapezoid Shapes\n\nParallelogram and trapezoid shapes are perfect for inputs/outputs and transitional processes:\n\n```mermaid-example\nblock-beta\n  id1[/\"This is the text in the box\"/]\n  id2[\\\"This is the text in the box\"\\]\n  A[/\"Christmas\"\\]\n  B[\\\"Go shopping\"/]\n```\n\n#### Example - Double Circle\n\nFor highlighting critical or high-priority components, a double circle can be effective:\n\n```mermaid-example\nblock-beta\n    id1(((\"This is the text in the circle\")))\n```\n\n### Block Arrows and Space Blocks\n\nMermaid also offers unique shapes like block arrows and space blocks for directional flow and spacing.\n\n#### Example - Block Arrows\n\nBlock arrows can visually indicate direction or flow within a process:\n\n```mermaid-example\nblock-beta\n  blockArrowId<[\"Label\"]>(right)\n  blockArrowId2<[\"Label\"]>(left)\n  blockArrowId3<[\"Label\"]>(up)\n  blockArrowId4<[\"Label\"]>(down)\n  blockArrowId5<[\"Label\"]>(x)\n  blockArrowId6<[\"Label\"]>(y)\n  blockArrowId6<[\"Label\"]>(x, down)\n```\n\n#### Example - Space Blocks\n\nSpace blocks can be used to create intentional empty spaces in the diagram, which is useful for layout and readability:\n\n```mermaid-example\nblock-beta\n  columns 3\n  a space b\n  c   d   e\n```\n\nor\n\n```mermaid-example\nblock-beta\n  ida space:3 idb idc\n```\n\nNote that you can set how many columns the space block occupied using the number notation `space:num` where num is a number indicating the num columns width. You can also use `space` which defaults to one column.\n\nThe variety of shapes and special blocks in Mermaid enhances the expressive power of block diagrams, allowing for more accurate and context-specific representations. These options give users the flexibility to create diagrams that are both informative and visually appealing. In the next sections, we will explore the ways to connect these blocks and customize their appearance.\n\n### Standard and Special Block Shapes\n\nDiscuss the various shapes available for blocks, including standard shapes and special forms like block arrows and space blocks.\n\n## 5. Connecting Blocks with Edges\n\nOne of the key features of block diagrams in Mermaid is the ability to connect blocks using various types of edges or links. This section explores the different ways blocks can be interconnected to represent relationships and flows between components.\n\n### Basic Linking and Arrow Types\n\nThe most fundamental aspect of connecting blocks is the use of arrows or links. These connectors depict the relationships or the flow of information between the blocks. Mermaid offers a range of arrow types to suit different diagramming needs.\n\n**Example - Basic Links**\n\nA simple link with an arrow can be created to show direction or flow from one block to another:\n\n```mermaid-example\nblock-beta\n  A space B\n  A-->B\n```\n\nThis example illustrates a direct connection from block 'A' to block 'B', using a straightforward arrow.\n\nThis syntax creates a line connecting 'A' and 'B', implying a relationship or connection without indicating a specific direction.\n\n### Text on Links\n\nIn addition to connecting blocks, it's often necessary to describe or label the relationship. Mermaid allows for the inclusion of text on links, providing context to the connections.\n\nExample - Text with Links\nTo add text to a link, the syntax includes the text within the link definition:\n\n```mermaid-example\nblock-beta\n  A space:2 B\n  A-- \"X\" -->B\n```\n\nThis example show how to add descriptive text to the links, enhancing the information conveyed by the diagram.\n\nExample - Edges and Styles:\n\n```mermaid-example\nblock-beta\ncolumns 1\n  db((\"DB\"))\n  blockArrowId6<[\"&nbsp;&nbsp;&nbsp;\"]>(down)\n  block:ID\n    A\n    B[\"A wide one in the middle\"]\n    C\n  end\n  space\n  D\n  ID --> D\n  C --> D\n  style B fill:#939,stroke:#333,stroke-width:4px\n```\n\n## 6. Styling and Customization\n\nBeyond the structure and layout of block diagrams, Mermaid offers extensive styling options. These customization features allow for the creation of more visually distinctive and informative diagrams. This section covers how to apply individual styles to blocks and how to use classes for consistent styling across multiple elements.\n\n### Individual Block Styling\n\nMermaid enables detailed styling of individual blocks, allowing you to apply various CSS properties such as color, stroke, and border thickness. This feature is especially useful for highlighting specific parts of a diagram or for adhering to certain visual themes.\n\n#### Example - Styling a Single Block\n\nTo apply custom styles to a block, you can use the `style` keyword followed by the block identifier and the desired CSS properties:\n\n```mermaid-example\nblock-beta\n  id1 space id2\n  id1(\"Start\")-->id2(\"Stop\")\n  style id1 fill:#636,stroke:#333,stroke-width:4px\n  style id2 fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5\n```\n\nIn this example, a class named 'blue' is defined and applied to block 'A', while block 'B' receives individual styling. This demonstrates the flexibility of Mermaid in applying both shared and unique styles within the same diagram.\n\nThe ability to style blocks individually or through classes provides a powerful tool for enhancing the visual impact and clarity of block diagrams. Whether emphasizing certain elements or maintaining a cohesive design across the diagram, these styling capabilities are central to effective diagramming. The next sections will present practical examples and use cases, followed by tips for troubleshooting common issues.\n\n### 7. Practical Examples and Use Cases\n\nThe versatility of Mermaid's block diagrams becomes evident when applied to real-world scenarios. This section provides practical examples demonstrating the application of various features discussed in previous sections. These examples showcase how block diagrams can be used to represent complex systems and processes in an accessible and informative manner.\n\n### Detailed Examples Illustrating Various Features\n\nCombining the elements of structure, linking, and styling, we can create comprehensive diagrams that serve specific purposes in different contexts.\n\n#### Example - System Architecture\n\nIllustrating a simple software system architecture with interconnected components:\n\n```mermaid\nblock-beta\n  columns 3\n  Frontend blockArrowId6<[\" \"]>(right) Backend\n  space:2 down<[\" \"]>(down)\n  Disk left<[\" \"]>(left) Database[(\"Database\")]\n\n  classDef front fill:#696,stroke:#333;\n  classDef back fill:#969,stroke:#333;\n  class Frontend front\n  class Backend,Database back\n```\n\nThis example shows a basic architecture with a frontend, backend, and database. The blocks are styled to differentiate between types of components.\n\n#### Example - Business Process Flow\n\nRepresenting a business process flow with decision points and multiple stages:\n\n```mermaid-example\nblock-beta\n  columns 3\n  Start((\"Start\")) space:2\n  down<[\" \"]>(down) space:2\n  Decision{{\"Make Decision\"}} right<[\"Yes\"]>(right) Process1[\"Process A\"]\n  downAgain<[\"No\"]>(down) space r3<[\"Done\"]>(down)\n  Process2[\"Process B\"] r2<[\"Done\"]>(right) End((\"End\"))\n\n  style Start fill:#969;\n  style End fill:#696;\n```\n\nThese practical examples and scenarios underscore the utility of Mermaid block diagrams in simplifying and effectively communicating complex information across various domains.\n\nThe next section, 'Troubleshooting and Common Issues', will provide insights into resolving common challenges encountered when working with Mermaid block diagrams, ensuring a smooth diagramming experience.\n\n## 8. Troubleshooting and Common Issues\n\nWorking with Mermaid block diagrams can sometimes present challenges, especially as the complexity of the diagrams increases. This section aims to provide guidance on resolving common issues and offers tips for managing more intricate diagram structures.\n\n### Common Syntax Errors\n\nUnderstanding and avoiding common syntax errors is key to a smooth experience with Mermaid diagrams.\n\n#### Example - Incorrect Linking\n\nA common mistake is incorrect linking syntax, which can lead to unexpected results or broken diagrams:\n\n```\nblock-beta\n  A - B\n```\n\n**Correction**:\nEnsure that links between blocks are correctly specified with arrows (--> or ---) to define the direction and type of connection. Also remember that one of the fundaments for block diagram is to give the author full control of where the boxes are positioned so in the example you need to add a space between the boxes:\n\n```mermaid-example\nblock-beta\n  A space B\n  A --> B\n```\n\n#### Example - Misplaced Styling\n\nApplying styles in the wrong context or with incorrect syntax can lead to blocks not being styled as intended:\n\n```mermaid-example\n  block-beta\n    A\n    style A fill#969;\n```\n\n**Correction:**\nCorrect the syntax by ensuring proper separation of style properties with commas and using the correct CSS property format:\n\n```mermaid-example\nblock-beta\n  A\n  style A fill:#969,stroke:#333;\n\n```\n\n### Tips for Complex Diagram Structures\n\nManaging complexity in Mermaid diagrams involves planning and employing best practices.\n\n#### Modular Design\n\nBreak down complex diagrams into smaller, more manageable components. This approach not only makes the diagram easier to understand but also simplifies the creation and maintenance process.\n\n#### Consistent Styling\n\nUse classes to maintain consistent styling across similar elements. This not only saves time but also ensures a cohesive and professional appearance.\n\n#### Comments and Documentation\n\nUse comments with `%%` within the Mermaid syntax to document the purpose of various parts of the diagram. This practice is invaluable for maintaining clarity, especially when working in teams or returning to a diagram after some time.\n\nWith these troubleshooting tips and best practices, you can effectively manage and resolve common issues in Mermaid block diagrams. The final section, 'Conclusion', will summarize the key points covered in this documentation and invite user feedback for continuous improvement.\n", "C4 Diagram": "# C4 Diagrams\n\n> C4 Diagram: This is an experimental diagram for now. The syntax and properties can change in future releases. Proper documentation will be provided when the syntax is stable.\n\nMermaid's C4 diagram syntax is compatible with plantUML. See example below:\n\n```mermaid-example\n    C4Context\n      title System Context diagram for Internet Banking System\n      Enterprise_Boundary(b0, \"BankBoundary0\") {\n        Person(customerA, \"Banking Customer A\", \"A customer of the bank, with personal bank accounts.\")\n        Person(customerB, \"Banking Customer B\")\n        Person_Ext(customerC, \"Banking Customer C\", \"desc\")\n\n        Person(customerD, \"Banking Customer D\", \"A customer of the bank, <br/> with personal bank accounts.\")\n\n        System(SystemAA, \"Internet Banking System\", \"Allows customers to view information about their bank accounts, and make payments.\")\n\n        Enterprise_Boundary(b1, \"BankBoundary\") {\n\n          SystemDb_Ext(SystemE, \"Mainframe Banking System\", \"Stores all of the core banking information about customers, accounts, transactions, etc.\")\n\n          System_Boundary(b2, \"BankBoundary2\") {\n            System(SystemA, \"Banking System A\")\n            System(SystemB, \"Banking System B\", \"A system of the bank, with personal bank accounts. next line.\")\n          }\n\n          System_Ext(SystemC, \"E-mail system\", \"The internal Microsoft Exchange e-mail system.\")\n          SystemDb(SystemD, \"Banking System D Database\", \"A system of the bank, with personal bank accounts.\")\n\n          Boundary(b3, \"BankBoundary3\", \"boundary\") {\n            SystemQueue(SystemF, \"Banking System F Queue\", \"A system of the bank.\")\n            SystemQueue_Ext(SystemG, \"Banking System G Queue\", \"A system of the bank, with personal bank accounts.\")\n          }\n        }\n      }\n\n      BiRel(customerA, SystemAA, \"Uses\")\n      BiRel(SystemAA, SystemE, \"Uses\")\n      Rel(SystemAA, SystemC, \"Sends e-mails\", \"SMTP\")\n      Rel(SystemC, customerA, \"Sends e-mails to\")\n\n      UpdateElementStyle(customerA, $fontColor=\"red\", $bgColor=\"grey\", $borderColor=\"red\")\n      UpdateRelStyle(customerA, SystemAA, $textColor=\"blue\", $lineColor=\"blue\", $offsetX=\"5\")\n      UpdateRelStyle(SystemAA, SystemE, $textColor=\"blue\", $lineColor=\"blue\", $offsetY=\"-10\")\n      UpdateRelStyle(SystemAA, SystemC, $textColor=\"blue\", $lineColor=\"blue\", $offsetY=\"-40\", $offsetX=\"-50\")\n      UpdateRelStyle(SystemC, customerA, $textColor=\"red\", $lineColor=\"red\", $offsetX=\"-50\", $offsetY=\"20\")\n\n      UpdateLayoutConfig($c4ShapeInRow=\"3\", $c4BoundaryInRow=\"1\")\n\n\n```\n\nFor an example, see the source code demos/index.html\n\n5 types of C4 charts are supported.\n\n- System Context (C4Context)\n- Container diagram (C4Container)\n- Component diagram (C4Component)\n- Dynamic diagram (C4Dynamic)\n- Deployment diagram (C4Deployment)\n\nPlease refer to the linked document [C4-PlantUML syntax](https://github.com/plantuml-stdlib/C4-PlantUML/blob/master/README.md) for how to write the C4 diagram.\n\nC4 diagram is fixed style, such as css color, so different css is not provided under different skins.\nupdateElementStyle and UpdateElementStyle are written in the diagram last part. updateElementStyle is inconsistent with the original definition and updates the style of the relationship, including the offset of the text label relative to the original position.\n\nThe layout does not use a fully automated layout algorithm. The position of shapes is adjusted by changing the order in which statements are written. So there is no plan to support the following Layout statements.\nThe number of shapes per row and the number of boundaries can be adjusted using UpdateLayoutConfig.\n\n- Layout\n  - Lay_U, Lay_Up\n  - Lay_D, Lay_Down\n  - Lay_L, Lay_Left\n  - Lay_R, Lay_Right\n\nThe following unfinished features are not supported in the short term.\n\n- [ ] sprite\n- [ ] tags\n- [ ] link\n- [ ] Legend\n\n- [x] System Context\n\n  - [x] Person(alias, label, ?descr, ?sprite, ?tags, $link)\n  - [x] Person_Ext\n  - [x] System(alias, label, ?descr, ?sprite, ?tags, $link)\n  - [x] SystemDb\n  - [x] SystemQueue\n  - [x] System_Ext\n  - [x] SystemDb_Ext\n  - [x] SystemQueue_Ext\n  - [x] Boundary(alias, label, ?type, ?tags, $link)\n  - [x] Enterprise_Boundary(alias, label, ?tags, $link)\n  - [x] System_Boundary\n\n- [x] Container diagram\n\n  - [x] Container(alias, label, ?techn, ?descr, ?sprite, ?tags, $link)\n  - [x] ContainerDb\n  - [x] ContainerQueue\n  - [x] Container_Ext\n  - [x] ContainerDb_Ext\n  - [x] ContainerQueue_Ext\n  - [x] Container_Boundary(alias, label, ?tags, $link)\n\n- [x] Component diagram\n\n  - [x] Component(alias, label, ?techn, ?descr, ?sprite, ?tags, $link)\n  - [x] ComponentDb\n  - [x] ComponentQueue\n  - [x] Component_Ext\n  - [x] ComponentDb_Ext\n  - [x] ComponentQueue_Ext\n\n- [x] Dynamic diagram\n\n  - [x] RelIndex(index, from, to, label, ?tags, $link)\n\n- [x] Deployment diagram\n\n  - [x] Deployment_Node(alias, label, ?type, ?descr, ?sprite, ?tags, $link)\n  - [x] Node(alias, label, ?type, ?descr, ?sprite, ?tags, $link): short name of Deployment_Node()\n  - [x] Node_L(alias, label, ?type, ?descr, ?sprite, ?tags, $link): left aligned Node()\n  - [x] Node_R(alias, label, ?type, ?descr, ?sprite, ?tags, $link): right aligned Node()\n\n- [x] Relationship Types\n\n  - [x] Rel(from, to, label, ?techn, ?descr, ?sprite, ?tags, $link)\n  - [x] BiRel (bidirectional relationship)\n  - [x] Rel_U, Rel_Up\n  - [x] Rel_D, Rel_Down\n  - [x] Rel_L, Rel_Left\n  - [x] Rel_R, Rel_Right\n  - [x] Rel_Back\n  - [x] RelIndex \\* Compatible with C4-PlantUML syntax, but ignores the index parameter. The sequence number is determined by the order in which the rel statements are written.\n\n- [ ] Custom tags/stereotypes support and skin param updates\n  - [ ] AddElementTag(tagStereo, ?bgColor, ?fontColor, ?borderColor, ?shadowing, ?shape, ?sprite, ?techn, ?legendText, ?legendSprite): Introduces a new element tag. The styles of the tagged elements are updated and the tag is displayed in the calculated legend.\n  - [ ] AddRelTag(tagStereo, ?textColor, ?lineColor, ?lineStyle, ?sprite, ?techn, ?legendText, ?legendSprite): Introduces a new Relationship tag. The styles of the tagged relationships are updated and the tag is displayed in the calculated legend.\n  - [x] UpdateElementStyle(elementName, ?bgColor, ?fontColor, ?borderColor, ?shadowing, ?shape, ?sprite, ?techn, ?legendText, ?legendSprite): This call updates the default style of the elements (component, ...) and creates no additional legend entry.\n  - [x] UpdateRelStyle(from, to, ?textColor, ?lineColor, ?offsetX, ?offsetY): This call updates the default relationship colors and creates no additional legend entry. Two new parameters, offsetX and offsetY, are added to set the offset of the original position of the text.\n  - [ ] RoundedBoxShape(): This call returns the name of the rounded box shape and can be used as ?shape argument.\n  - [ ] EightSidedShape(): This call returns the name of the eight sided shape and can be used as ?shape argument.\n  - [ ] DashedLine(): This call returns the name of the dashed line and can be used as ?lineStyle argument.\n  - [ ] DottedLine(): This call returns the name of the dotted line and can be used as ?lineStyle argument.\n  - [ ] BoldLine(): This call returns the name of the bold line and can be used as ?lineStyle argument.\n  - [x] UpdateLayoutConfig(?c4ShapeInRow, ?c4BoundaryInRow): New. This call updates the default c4ShapeInRow(4) and c4BoundaryInRow(2).\n\nThere are two ways to assign parameters with question marks. One uses the non-named parameter assignment method in the order of the parameters, and the other uses the named parameter assignment method, where the name must start with a $ symbol.\n\nExample: UpdateRelStyle(from, to, ?textColor, ?lineColor, ?offsetX, ?offsetY)\n\n```\nUpdateRelStyle(customerA, bankA, \"red\", \"blue\", \"-40\", \"60\")\nUpdateRelStyle(customerA, bankA, $offsetX=\"-40\", $offsetY=\"60\", $lineColor=\"blue\", $textColor=\"red\")\nUpdateRelStyle(customerA, bankA, $offsetY=\"60\")\n\n```\n\n## C4 System Context Diagram (C4Context)\n\n```mermaid-example\n    C4Context\n      title System Context diagram for Internet Banking System\n      Enterprise_Boundary(b0, \"BankBoundary0\") {\n        Person(customerA, \"Banking Customer A\", \"A customer of the bank, with personal bank accounts.\")\n        Person(customerB, \"Banking Customer B\")\n        Person_Ext(customerC, \"Banking Customer C\", \"desc\")\n\n        Person(customerD, \"Banking Customer D\", \"A customer of the bank, <br/> with personal bank accounts.\")\n\n        System(SystemAA, \"Internet Banking System\", \"Allows customers to view information about their bank accounts, and make payments.\")\n\n        Enterprise_Boundary(b1, \"BankBoundary\") {\n\n          SystemDb_Ext(SystemE, \"Mainframe Banking System\", \"Stores all of the core banking information about customers, accounts, transactions, etc.\")\n\n          System_Boundary(b2, \"BankBoundary2\") {\n            System(SystemA, \"Banking System A\")\n            System(SystemB, \"Banking System B\", \"A system of the bank, with personal bank accounts. next line.\")\n          }\n\n          System_Ext(SystemC, \"E-mail system\", \"The internal Microsoft Exchange e-mail system.\")\n          SystemDb(SystemD, \"Banking System D Database\", \"A system of the bank, with personal bank accounts.\")\n\n          Boundary(b3, \"BankBoundary3\", \"boundary\") {\n            SystemQueue(SystemF, \"Banking System F Queue\", \"A system of the bank.\")\n            SystemQueue_Ext(SystemG, \"Banking System G Queue\", \"A system of the bank, with personal bank accounts.\")\n          }\n        }\n      }\n\n      BiRel(customerA, SystemAA, \"Uses\")\n      BiRel(SystemAA, SystemE, \"Uses\")\n      Rel(SystemAA, SystemC, \"Sends e-mails\", \"SMTP\")\n      Rel(SystemC, customerA, \"Sends e-mails to\")\n\n      UpdateElementStyle(customerA, $fontColor=\"red\", $bgColor=\"grey\", $borderColor=\"red\")\n      UpdateRelStyle(customerA, SystemAA, $textColor=\"blue\", $lineColor=\"blue\", $offsetX=\"5\")\n      UpdateRelStyle(SystemAA, SystemE, $textColor=\"blue\", $lineColor=\"blue\", $offsetY=\"-10\")\n      UpdateRelStyle(SystemAA, SystemC, $textColor=\"blue\", $lineColor=\"blue\", $offsetY=\"-40\", $offsetX=\"-50\")\n      UpdateRelStyle(SystemC, customerA, $textColor=\"red\", $lineColor=\"red\", $offsetX=\"-50\", $offsetY=\"20\")\n\n      UpdateLayoutConfig($c4ShapeInRow=\"3\", $c4BoundaryInRow=\"1\")\n\n```\n\n## C4 Container diagram (C4Container)\n\n```mermaid-example\n    C4Container\n    title Container diagram for Internet Banking System\n\n    System_Ext(email_system, \"E-Mail System\", \"The internal Microsoft Exchange system\", $tags=\"v1.0\")\n    Person(customer, Customer, \"A customer of the bank, with personal bank accounts\", $tags=\"v1.0\")\n\n    Container_Boundary(c1, \"Internet Banking\") {\n        Container(spa, \"Single-Page App\", \"JavaScript, Angular\", \"Provides all the Internet banking functionality to customers via their web browser\")\n        Container_Ext(mobile_app, \"Mobile App\", \"C#, Xamarin\", \"Provides a limited subset of the Internet banking functionality to customers via their mobile device\")\n        Container(web_app, \"Web Application\", \"Java, Spring MVC\", \"Delivers the static content and the Internet banking SPA\")\n        ContainerDb(database, \"Database\", \"SQL Database\", \"Stores user registration information, hashed auth credentials, access logs, etc.\")\n        ContainerDb_Ext(backend_api, \"API Application\", \"Java, Docker Container\", \"Provides Internet banking functionality via API\")\n\n    }\n\n    System_Ext(banking_system, \"Mainframe Banking System\", \"Stores all of the core banking information about customers, accounts, transactions, etc.\")\n\n    Rel(customer, web_app, \"Uses\", \"HTTPS\")\n    UpdateRelStyle(customer, web_app, $offsetY=\"60\", $offsetX=\"90\")\n    Rel(customer, spa, \"Uses\", \"HTTPS\")\n    UpdateRelStyle(customer, spa, $offsetY=\"-40\")\n    Rel(customer, mobile_app, \"Uses\")\n    UpdateRelStyle(customer, mobile_app, $offsetY=\"-30\")\n\n    Rel(web_app, spa, \"Delivers\")\n    UpdateRelStyle(web_app, spa, $offsetX=\"130\")\n    Rel(spa, backend_api, \"Uses\", \"async, JSON/HTTPS\")\n    Rel(mobile_app, backend_api, \"Uses\", \"async, JSON/HTTPS\")\n    Rel_Back(database, backend_api, \"Reads from and writes to\", \"sync, JDBC\")\n\n    Rel(email_system, customer, \"Sends e-mails to\")\n    UpdateRelStyle(email_system, customer, $offsetX=\"-45\")\n    Rel(backend_api, email_system, \"Sends e-mails using\", \"sync, SMTP\")\n    UpdateRelStyle(backend_api, email_system, $offsetY=\"-60\")\n    Rel(backend_api, banking_system, \"Uses\", \"sync/async, XML/HTTPS\")\n    UpdateRelStyle(backend_api, banking_system, $offsetY=\"-50\", $offsetX=\"-140\")\n\n```\n\n## C4 Component diagram (C4Component)\n\n```mermaid-example\n    C4Component\n    title Component diagram for Internet Banking System - API Application\n\n    Container(spa, \"Single Page Application\", \"javascript and angular\", \"Provides all the internet banking functionality to customers via their web browser.\")\n    Container(ma, \"Mobile App\", \"Xamarin\", \"Provides a limited subset to the internet banking functionality to customers via their mobile mobile device.\")\n    ContainerDb(db, \"Database\", \"Relational Database Schema\", \"Stores user registration information, hashed authentication credentials, access logs, etc.\")\n    System_Ext(mbs, \"Mainframe Banking System\", \"Stores all of the core banking information about customers, accounts, transactions, etc.\")\n\n    Container_Boundary(api, \"API Application\") {\n        Component(sign, \"Sign In Controller\", \"MVC Rest Controller\", \"Allows users to sign in to the internet banking system\")\n        Component(accounts, \"Accounts Summary Controller\", \"MVC Rest Controller\", \"Provides customers with a summary of their bank accounts\")\n        Component(security, \"Security Component\", \"Spring Bean\", \"Provides functionality related to singing in, changing passwords, etc.\")\n        Component(mbsfacade, \"Mainframe Banking System Facade\", \"Spring Bean\", \"A facade onto the mainframe banking system.\")\n\n        Rel(sign, security, \"Uses\")\n        Rel(accounts, mbsfacade, \"Uses\")\n        Rel(security, db, \"Read & write to\", \"JDBC\")\n        Rel(mbsfacade, mbs, \"Uses\", \"XML/HTTPS\")\n    }\n\n    Rel_Back(spa, sign, \"Uses\", \"JSON/HTTPS\")\n    Rel(spa, accounts, \"Uses\", \"JSON/HTTPS\")\n\n    Rel(ma, sign, \"Uses\", \"JSON/HTTPS\")\n    Rel(ma, accounts, \"Uses\", \"JSON/HTTPS\")\n\n    UpdateRelStyle(spa, sign, $offsetY=\"-40\")\n    UpdateRelStyle(spa, accounts, $offsetX=\"40\", $offsetY=\"40\")\n\n    UpdateRelStyle(ma, sign, $offsetX=\"-90\", $offsetY=\"40\")\n    UpdateRelStyle(ma, accounts, $offsetY=\"-40\")\n\n        UpdateRelStyle(sign, security, $offsetX=\"-160\", $offsetY=\"10\")\n        UpdateRelStyle(accounts, mbsfacade, $offsetX=\"140\", $offsetY=\"10\")\n        UpdateRelStyle(security, db, $offsetY=\"-40\")\n        UpdateRelStyle(mbsfacade, mbs, $offsetY=\"-40\")\n\n```\n\n## C4 Dynamic diagram (C4Dynamic)\n\n```mermaid-example\n    C4Dynamic\n    title Dynamic diagram for Internet Banking System - API Application\n\n    ContainerDb(c4, \"Database\", \"Relational Database Schema\", \"Stores user registration information, hashed authentication credentials, access logs, etc.\")\n    Container(c1, \"Single-Page Application\", \"JavaScript and Angular\", \"Provides all of the Internet banking functionality to customers via their web browser.\")\n    Container_Boundary(b, \"API Application\") {\n      Component(c3, \"Security Component\", \"Spring Bean\", \"Provides functionality Related to signing in, changing passwords, etc.\")\n      Component(c2, \"Sign In Controller\", \"Spring MVC Rest Controller\", \"Allows users to sign in to the Internet Banking System.\")\n    }\n    Rel(c1, c2, \"Submits credentials to\", \"JSON/HTTPS\")\n    Rel(c2, c3, \"Calls isAuthenticated() on\")\n    Rel(c3, c4, \"select * from users where username = ?\", \"JDBC\")\n\n    UpdateRelStyle(c1, c2, $textColor=\"red\", $offsetY=\"-40\")\n    UpdateRelStyle(c2, c3, $textColor=\"red\", $offsetX=\"-40\", $offsetY=\"60\")\n    UpdateRelStyle(c3, c4, $textColor=\"red\", $offsetY=\"-40\", $offsetX=\"10\")\n\n```\n\n## C4 Deployment diagram (C4Deployment)\n\n```mermaid-example\n    C4Deployment\n    title Deployment Diagram for Internet Banking System - Live\n\n    Deployment_Node(mob, \"Customer's mobile device\", \"Apple IOS or Android\"){\n        Container(mobile, \"Mobile App\", \"Xamarin\", \"Provides a limited subset of the Internet Banking functionality to customers via their mobile device.\")\n    }\n\n    Deployment_Node(comp, \"Customer's computer\", \"Microsoft Windows or Apple macOS\"){\n        Deployment_Node(browser, \"Web Browser\", \"Google Chrome, Mozilla Firefox,<br/> Apple Safari or Microsoft Edge\"){\n            Container(spa, \"Single Page Application\", \"JavaScript and Angular\", \"Provides all of the Internet Banking functionality to customers via their web browser.\")\n        }\n    }\n\n    Deployment_Node(plc, \"Big Bank plc\", \"Big Bank plc data center\"){\n        Deployment_Node(dn, \"bigbank-api*** x8\", \"Ubuntu 16.04 LTS\"){\n            Deployment_Node(apache, \"Apache Tomcat\", \"Apache Tomcat 8.x\"){\n                Container(api, \"API Application\", \"Java and Spring MVC\", \"Provides Internet Banking functionality via a JSON/HTTPS API.\")\n            }\n        }\n        Deployment_Node(bb2, \"bigbank-web*** x4\", \"Ubuntu 16.04 LTS\"){\n            Deployment_Node(apache2, \"Apache Tomcat\", \"Apache Tomcat 8.x\"){\n                Container(web, \"Web Application\", \"Java and Spring MVC\", \"Delivers the static content and the Internet Banking single page application.\")\n            }\n        }\n        Deployment_Node(bigbankdb01, \"bigbank-db01\", \"Ubuntu 16.04 LTS\"){\n            Deployment_Node(oracle, \"Oracle - Primary\", \"Oracle 12c\"){\n                ContainerDb(db, \"Database\", \"Relational Database Schema\", \"Stores user registration information, hashed authentication credentials, access logs, etc.\")\n            }\n        }\n        Deployment_Node(bigbankdb02, \"bigbank-db02\", \"Ubuntu 16.04 LTS\") {\n            Deployment_Node(oracle2, \"Oracle - Secondary\", \"Oracle 12c\") {\n                ContainerDb(db2, \"Database\", \"Relational Database Schema\", \"Stores user registration information, hashed authentication credentials, access logs, etc.\")\n            }\n        }\n    }\n\n    Rel(mobile, api, \"Makes API calls to\", \"json/HTTPS\")\n    Rel(spa, api, \"Makes API calls to\", \"json/HTTPS\")\n    Rel_U(web, spa, \"Delivers to the customer's web browser\")\n    Rel(api, db, \"Reads from and writes to\", \"JDBC\")\n    Rel(api, db2, \"Reads from and writes to\", \"JDBC\")\n    Rel_R(db, db2, \"Replicates data to\")\n\n    UpdateRelStyle(spa, api, $offsetY=\"-40\")\n    UpdateRelStyle(web, spa, $offsetY=\"-40\")\n    UpdateRelStyle(api, db, $offsetY=\"-20\", $offsetX=\"5\")\n    UpdateRelStyle(api, db2, $offsetX=\"-40\", $offsetY=\"-20\")\n    UpdateRelStyle(db, db2, $offsetY=\"-10\")\n\n```\n\n<!--- cspell:ignore bigbank bigbankdb techn mbsfacade  --->\n", "Class Diagram": "# Class diagrams\n\n> \"In software engineering, a class diagram in the Unified Modeling Language (UML) is a type of static structure diagram that describes the structure of a system by showing the system's classes, their attributes, operations (or methods), and the relationships among objects.\"\n>\n> -Wikipedia\n\nThe class diagram is the main building block of object-oriented modeling. It is used for general conceptual modeling of the structure of the application, and for detailed modeling to translate the models into programming code. Class diagrams can also be used for data modeling. The classes in a class diagram represent both the main elements, interactions in the application, and the classes to be programmed.\n\nMermaid can render class diagrams.\n\n```mermaid-example\n---\ntitle: Animal example\n---\nclassDiagram\n    note \"From Duck till Zebra\"\n    Animal <|-- Duck\n    note for Duck \"can fly\\ncan swim\\ncan dive\\ncan help in debugging\"\n    Animal <|-- Fish\n    Animal <|-- Zebra\n    Animal : +int age\n    Animal : +String gender\n    Animal: +isMammal()\n    Animal: +mate()\n    class Duck{\n        +String beakColor\n        +swim()\n        +quack()\n    }\n    class Fish{\n        -int sizeInFeet\n        -canEat()\n    }\n    class Zebra{\n        +bool is_wild\n        +run()\n    }\n```\n\n## Syntax\n\n### Class\n\nUML provides mechanisms to represent class members, such as attributes and methods, and additional information about them.\nA single instance of a class in the diagram contains three compartments:\n\n- The top compartment contains the name of the class. It is printed in bold and centered, and the first letter is capitalized. It may also contain optional annotation text describing the nature of the class.\n- The middle compartment contains the attributes of the class. They are left-aligned and the first letter is lowercase.\n- The bottom compartment contains the operations the class can execute. They are also left-aligned and the first letter is lowercase.\n\n```mermaid-example\n---\ntitle: Bank example\n---\nclassDiagram\n    class BankAccount\n    BankAccount : +String owner\n    BankAccount : +Bigdecimal balance\n    BankAccount : +deposit(amount)\n    BankAccount : +withdrawal(amount)\n\n```\n\n## Define a class\n\nThere are two ways to define a class:\n\n- Explicitly using keyword **class** like `class Animal` which would define the Animal class.\n- Via a **relationship** which defines two classes at a time along with their relationship. For instance, `Vehicle <|-- Car`.\n\n```mermaid-example\nclassDiagram\n    class Animal\n    Vehicle <|-- Car\n```\n\nNaming convention: a class name should be composed only of alphanumeric characters (including unicode), underscores, and dashes (-).\n\n### Class labels\n\nIn case you need to provide a label for a class, you can use the following syntax:\n\n```mermaid-example\nclassDiagram\n    class Animal[\"Animal with a label\"]\n    class Car[\"Car with *! symbols\"]\n    Animal --> Car\n```\n\nYou can also use backticks to escape special characters in the label:\n\n```mermaid-example\nclassDiagram\n    class `Animal Class!`\n    class `Car Class`\n    `Animal Class!` --> `Car Class`\n```\n\n## Defining Members of a class\n\nUML provides mechanisms to represent class members such as attributes and methods, as well as additional information about them.\n\nMermaid distinguishes between attributes and functions/methods based on if the **parenthesis** `()` are present or not. The ones with `()` are treated as functions/methods, and all others as attributes.\n\nThere are two ways to define the members of a class, and regardless of whichever syntax is used to define the members, the output will still be same. The two different ways are :\n\n- Associate a member of a class using **:** (colon) followed by member name, useful to define one member at a time. For example:\n\n```mermaid-example\nclassDiagram\nclass BankAccount\nBankAccount : +String owner\nBankAccount : +BigDecimal balance\nBankAccount : +deposit(amount)\nBankAccount : +withdrawal(amount)\n```\n\n- Associate members of a class using **{}** brackets, where members are grouped within curly brackets. Suitable for defining multiple members at once. For example:\n\n```mermaid-example\nclassDiagram\nclass BankAccount{\n    +String owner\n    +BigDecimal balance\n    +deposit(amount)\n    +withdrawal(amount)\n}\n```\n\n#### Return Type\n\nOptionally you can end a method/function definition with the data type that will be returned (note: there must be a space between the final `)` and the return type). An example:\n\n```mermaid-example\nclassDiagram\nclass BankAccount{\n    +String owner\n    +BigDecimal balance\n    +deposit(amount) bool\n    +withdrawal(amount) int\n}\n```\n\n#### Generic Types\n\nGenerics can be represented as part of a class definition, and for class members/return types. In order to denote an item as generic, you enclose that type within `~` (**tilde**). **Nested** type declarations such as `List<List<int>>` are supported, though generics that include a comma are currently not supported. (such as `List<List<K, V>>`)\n\n> _note_ when a generic is used within a class definition, the generic type is NOT considered part of the class name. i.e.: for any syntax which required you to reference the class name, you need to drop the type part of the definition. This also means that mermaid does not currently support having two classes with the same name, but different generic types.\n\n```mermaid-example\nclassDiagram\nclass Square~Shape~{\n    int id\n    List~int~ position\n    setPoints(List~int~ points)\n    getPoints() List~int~\n}\n\nSquare : -List~string~ messages\nSquare : +setMessages(List~string~ messages)\nSquare : +getMessages() List~string~\nSquare : +getDistanceMatrix() List~List~int~~\n```\n\n#### Visibility\n\nTo describe the visibility (or encapsulation) of an attribute or method/function that is a part of a class (i.e. a class member), optional notation may be placed before that members' name:\n\n- `+` Public\n- `-` Private\n- `#` Protected\n- `~` Package/Internal\n\n> _note_ you can also include additional _classifiers_ to a method definition by adding the following notation to the _end_ of the method, i.e.: after the `()` or after the return type:\n>\n> - `*` Abstract e.g.: `someAbstractMethod()*` or `someAbstractMethod() int*`\n> - `$` Static e.g.: `someStaticMethod()$` or `someStaticMethod() String$`\n\n> _note_ you can also include additional _classifiers_ to a field definition by adding the following notation to the very end:\n>\n> - `$` Static e.g.: `String someField$`\n\n## Defining Relationship\n\nA relationship is a general term covering the specific types of logical connections found on class and object diagrams.\n\n```\n[classA][Arrow][ClassB]\n```\n\nThere are eight different types of relations defined for classes under UML which are currently supported:\n\n| Type    | Description   |\n| ------- | ------------- |\n| `<\\|--` | Inheritance   |\n| `*--`   | Composition   |\n| `o--`   | Aggregation   |\n| `-->`   | Association   |\n| `--`    | Link (Solid)  |\n| `..>`   | Dependency    |\n| `..\\|>` | Realization   |\n| `..`    | Link (Dashed) |\n\n```mermaid-example\nclassDiagram\nclassA <|-- classB\nclassC *-- classD\nclassE o-- classF\nclassG <-- classH\nclassI -- classJ\nclassK <.. classL\nclassM <|.. classN\nclassO .. classP\n\n```\n\nWe can use the labels to describe the nature of the relation between two classes. Also, arrowheads can be used in the opposite direction as well:\n\n```mermaid-example\nclassDiagram\nclassA --|> classB : Inheritance\nclassC --* classD : Composition\nclassE --o classF : Aggregation\nclassG --> classH : Association\nclassI -- classJ : Link(Solid)\nclassK ..> classL : Dependency\nclassM ..|> classN : Realization\nclassO .. classP : Link(Dashed)\n\n```\n\n### Labels on Relations\n\nIt is possible to add label text to a relation:\n\n```\n[classA][Arrow][ClassB]:LabelText\n```\n\n```mermaid-example\nclassDiagram\nclassA <|-- classB : implements\nclassC *-- classD : composition\nclassE o-- classF : aggregation\n```\n\n### Two-way relations\n\nRelations can logically represent an N:M association:\n\n```mermaid\nclassDiagram\n    Animal <|--|> Zebra\n```\n\nHere is the syntax:\n\n```\n[Relation Type][Link][Relation Type]\n```\n\nWhere `Relation Type` can be one of:\n\n| Type  | Description |\n| ----- | ----------- |\n| `<\\|` | Inheritance |\n| `\\*`  | Composition |\n| `o`   | Aggregation |\n| `>`   | Association |\n| `<`   | Association |\n| `\\|>` | Realization |\n\nAnd `Link` can be one of:\n\n| Type | Description |\n| ---- | ----------- |\n| --   | Solid       |\n| ..   | Dashed      |\n\n## Define Namespace\n\nA namespace groups classes.\n\n```mermaid-example\nclassDiagram\nnamespace BaseShapes {\n    class Triangle\n    class Rectangle {\n      double width\n      double height\n    }\n}\n```\n\n## Cardinality / Multiplicity on relations\n\nMultiplicity or cardinality in class diagrams indicates the number of instances of one class that can be linked to an instance of the other class. For example, each company will have one or more employees (not zero), and each employee currently works for zero or one companies.\n\nMultiplicity notations are placed near the end of an association.\n\nThe different cardinality options are :\n\n- `1` Only 1\n- `0..1` Zero or One\n- `1..*` One or more\n- `*` Many\n- `n` n (where n>1)\n- `0..n` zero to n (where n>1)\n- `1..n` one to n (where n>1)\n\nCardinality can be easily defined by placing the text option within quotes `\"` before or after a given arrow. For example:\n\n```\n[classA] \"cardinality1\" [Arrow] \"cardinality2\" [ClassB]:LabelText\n```\n\n```mermaid-example\nclassDiagram\n    Customer \"1\" --> \"*\" Ticket\n    Student \"1\" --> \"1..*\" Course\n    Galaxy --> \"many\" Star : Contains\n```\n\n## Annotations on classes\n\nIt is possible to annotate classes with markers to provide additional metadata about the class. This can give a clearer indication about its nature. Some common annotations include:\n\n- `<<Interface>>` To represent an Interface class\n- `<<Abstract>>` To represent an abstract class\n- `<<Service>>` To represent a service class\n- `<<Enumeration>>` To represent an enum\n\nAnnotations are defined within the opening `<<` and closing `>>`. There are two ways to add an annotation to a class, and either way the output will be same:\n\n- In a **_separate line_** after a class is defined:\n\n```mermaid-example\nclassDiagram\nclass Shape\n<<interface>> Shape\nShape : noOfVertices\nShape : draw()\n```\n\n- In a **_nested structure_** along with the class definition:\n\n```mermaid-example\nclassDiagram\nclass Shape{\n    <<interface>>\n    noOfVertices\n    draw()\n}\nclass Color{\n    <<enumeration>>\n    RED\n    BLUE\n    GREEN\n    WHITE\n    BLACK\n}\n\n```\n\n## Comments\n\nComments can be entered within a class diagram, which will be ignored by the parser. Comments need to be on their own line, and must be prefaced with `%%` (double percent signs). Any text until the next newline will be treated as a comment, including any class diagram syntax.\n\n```mermaid\nclassDiagram\n%% This whole line is a comment classDiagram class Shape <<interface>>\nclass Shape{\n    <<interface>>\n    noOfVertices\n    draw()\n}\n```\n\n## Setting the direction of the diagram\n\nWith class diagrams you can use the direction statement to set the direction in which the diagram will render:\n\n```mermaid-example\nclassDiagram\n  direction RL\n  class Student {\n    -idCard : IdCard\n  }\n  class IdCard{\n    -id : int\n    -name : string\n  }\n  class Bike{\n    -id : int\n    -name : string\n  }\n  Student \"1\" --o \"1\" IdCard : carries\n  Student \"1\" --o \"1\" Bike : rides\n```\n\n## Interaction\n\nIt is possible to bind a click event to a node. The click can lead to either a javascript callback or to a link which will be opened in a new browser tab. **Note**: This functionality is disabled when using `securityLevel='strict'` and enabled when using `securityLevel='loose'`.\n\nYou would define these actions on a separate line after all classes have been declared.\n\n```\naction className \"reference\" \"tooltip\"\nclick className call callback() \"tooltip\"\nclick className href \"url\" \"tooltip\"\n```\n\n- _action_ is either `link` or `callback`, depending on which type of interaction you want to have called\n- _className_ is the id of the node that the action will be associated with\n- _reference_ is either the url link, or the function name for callback.\n- (_optional_) tooltip is a string to be displayed when hovering over element (note: The styles of the tooltip are set by the class .mermaidTooltip.)\n- note: callback function will be called with the nodeId as parameter.\n\n## Notes\n\nIt is possible to add notes on the diagram using `note \"line1\\nline2\"`. A note can be added for a specific class using `note for <CLASS NAME> \"line1\\nline2\"`.\n\n### Examples\n\n```mermaid\nclassDiagram\n    note \"This is a general note\"\n    note for MyClass \"This is a note for a class\"\n    class MyClass{\n    }\n```\n\n_URL Link:_\n\n```mermaid\nclassDiagram\nclass Shape\nlink Shape \"https://www.github.com\" \"This is a tooltip for a link\"\nclass Shape2\nclick Shape2 href \"https://www.github.com\" \"This is a tooltip for a link\"\n```\n\n_Callback:_\n\n```mermaid\nclassDiagram\nclass Shape\ncallback Shape \"callbackFunction\" \"This is a tooltip for a callback\"\nclass Shape2\nclick Shape2 call callbackFunction() \"This is a tooltip for a callback\"\n```\n\n```html\n<script>\n  const callbackFunction = function () {\n    alert('A callback was triggered');\n  };\n</script>\n```\n\n```mermaid\nclassDiagram\n    class Class01\n    class Class02\n    callback Class01 \"callbackFunction\" \"Callback tooltip\"\n    link Class02 \"https://www.github.com\" \"This is a link\"\n    class Class03\n    class Class04\n    click Class03 call callbackFunction() \"Callback tooltip\"\n    click Class04 href \"https://www.github.com\" \"This is a link\"\n```\n\n> **Success** The tooltip functionality and the ability to link to urls are available from version 0.5.2.\n\nBeginner's tip—a full example using interactive links in an HTML page:\n\n```html\n<body>\n  <pre class=\"mermaid\">\n    classDiagram\n    Animal <|-- Duck\n    Animal <|-- Fish\n    Animal <|-- Zebra\n    Animal : +int age\n    Animal : +String gender\n    Animal: +isMammal()\n    Animal: +mate()\n    class Duck{\n      +String beakColor\n      +swim()\n      +quack()\n      }\n    class Fish{\n      -int sizeInFeet\n      -canEat()\n      }\n    class Zebra{\n      +bool is_wild\n      +run()\n      }\n\n      callback Duck callback \"Tooltip\"\n      link Zebra \"https://www.github.com\" \"This is a link\"\n  </pre>\n\n  <script>\n    const callback = function () {\n      alert('A callback was triggered');\n    };\n    const config = {\n      startOnLoad: true,\n      securityLevel: 'loose',\n    };\n    mermaid.initialize(config);\n  </script>\n</body>\n```\n\n## Styling\n\n### Styling a node (v10.7.0+)\n\nIt is possible to apply specific styles such as a thicker border or a different background color to an individual node using the `style` keyword.\n\n```mermaid-example\nclassDiagram\n  class Animal\n  class Mineral\n  style Animal fill:#f9f,stroke:#333,stroke-width:4px\n  style Mineral fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5\n```\n\n#### Classes\n\nMore convenient than defining the style every time is to define a class of styles and attach this class to the nodes that\nshould have a different look. This is done by predefining classes in css styles that can be applied from the graph definition using the `cssClass` statement or the `:::` short hand.\n\n```html\n<style>\n  .styleClass > rect {\n    fill: #ff0000;\n    stroke: #ffff00;\n    stroke-width: 4px;\n  }\n</style>\n```\n\nThen attaching that class to a specific node:\n\n```\n    cssClass \"nodeId1\" styleClass;\n```\n\nIt is also possible to attach a class to a list of nodes in one statement:\n\n```\n    cssClass \"nodeId1,nodeId2\" styleClass;\n```\n\nA shorter form of adding a class is to attach the classname to the node using the `:::` operator:\n\n```mermaid-example\nclassDiagram\n    class Animal:::styleClass\n```\n\nOr:\n\n```mermaid-example\nclassDiagram\n    class Animal:::styleClass {\n        -int sizeInFeet\n        -canEat()\n    }\n```\n\n?> cssClasses cannot be added using this shorthand method at the same time as a relation statement.\n\n?> Due to limitations with existing markup for class diagrams, it is not currently possible to define css classes within the diagram itself. **_Coming soon!_**\n\n### Default Styles\n\nThe main styling of the class diagram is done with a preset number of css classes. During rendering these classes are extracted from the file located at src/themes/class.scss. The classes used here are described below:\n\n| Class              | Description                                                       |\n| ------------------ | ----------------------------------------------------------------- |\n| g.classGroup text  | Styles for general class text                                     |\n| classGroup .title  | Styles for general class title                                    |\n| g.classGroup rect  | Styles for class diagram rectangle                                |\n| g.classGroup line  | Styles for class diagram line                                     |\n| .classLabel .box   | Styles for class label box                                        |\n| .classLabel .label | Styles for class label text                                       |\n| composition        | Styles for composition arrow head and arrow line                  |\n| aggregation        | Styles for aggregation arrow head and arrow line(dashed or solid) |\n| dependency         | Styles for dependency arrow head and arrow line                   |\n\n#### Sample stylesheet\n\n```scss\nbody {\n  background: white;\n}\n\ng.classGroup text {\n  fill: $nodeBorder;\n  stroke: none;\n  font-family: 'trebuchet ms', verdana, arial;\n  font-family: var(--mermaid-font-family);\n  font-size: 10px;\n\n  .title {\n    font-weight: bolder;\n  }\n}\n\ng.classGroup rect {\n  fill: $nodeBkg;\n  stroke: $nodeBorder;\n}\n\ng.classGroup line {\n  stroke: $nodeBorder;\n  stroke-width: 1;\n}\n\n.classLabel .box {\n  stroke: none;\n  stroke-width: 0;\n  fill: $nodeBkg;\n  opacity: 0.5;\n}\n\n.classLabel .label {\n  fill: $nodeBorder;\n  font-size: 10px;\n}\n\n.relation {\n  stroke: $nodeBorder;\n  stroke-width: 1;\n  fill: none;\n}\n\n@mixin composition {\n  fill: $nodeBorder;\n  stroke: $nodeBorder;\n  stroke-width: 1;\n}\n\n#compositionStart {\n  @include composition;\n}\n\n#compositionEnd {\n  @include composition;\n}\n\n@mixin aggregation {\n  fill: $nodeBkg;\n  stroke: $nodeBorder;\n  stroke-width: 1;\n}\n\n#aggregationStart {\n  @include aggregation;\n}\n\n#aggregationEnd {\n  @include aggregation;\n}\n\n#dependencyStart {\n  @include composition;\n}\n\n#dependencyEnd {\n  @include composition;\n}\n\n#extensionStart {\n  @include composition;\n}\n\n#extensionEnd {\n  @include composition;\n}\n```\n\n## Configuration\n\n`Coming soon!`\n", "Entity Relationship Diagram": "# Entity Relationship Diagrams\n\n> An entity–relationship model (or ER model) describes interrelated things of interest in a specific domain of knowledge. A basic ER model is composed of entity types (which classify the things of interest) and specifies relationships that can exist between entities (instances of those entity types) [Wikipedia](https://en.wikipedia.org/wiki/Entity%E2%80%93relationship_model).\n\nNote that practitioners of ER modelling almost always refer to _entity types_ simply as _entities_. For example the `CUSTOMER` entity _type_ would be referred to simply as the `CUSTOMER` entity. This is so common it would be inadvisable to do anything else, but technically an entity is an abstract _instance_ of an entity type, and this is what an ER diagram shows - abstract instances, and the relationships between them. This is why entities are always named using singular nouns.\n\nMermaid can render ER diagrams\n\n```mermaid-example\n---\ntitle: Order example\n---\nerDiagram\n    CUSTOMER ||--o{ ORDER : places\n    ORDER ||--|{ LINE-ITEM : contains\n    CUSTOMER }|..|{ DELIVERY-ADDRESS : uses\n```\n\nEntity names are often capitalised, although there is no accepted standard on this, and it is not required in Mermaid.\n\nRelationships between entities are represented by lines with end markers representing cardinality. Mermaid uses the most popular crow's foot notation. The crow's foot intuitively conveys the possibility of many instances of the entity that it connects to.\n\nER diagrams can be used for various purposes, ranging from abstract logical models devoid of any implementation details, through to physical models of relational database tables. It can be useful to include attribute definitions on ER diagrams to aid comprehension of the purpose and meaning of entities. These do not necessarily need to be exhaustive; often a small subset of attributes is enough. Mermaid allows them to be defined in terms of their _type_ and _name_.\n\n```mermaid-example\nerDiagram\n    CUSTOMER ||--o{ ORDER : places\n    CUSTOMER {\n        string name\n        string custNumber\n        string sector\n    }\n    ORDER ||--|{ LINE-ITEM : contains\n    ORDER {\n        int orderNumber\n        string deliveryAddress\n    }\n    LINE-ITEM {\n        string productCode\n        int quantity\n        float pricePerUnit\n    }\n```\n\nWhen including attributes on ER diagrams, you must decide whether to include foreign keys as attributes. This probably depends on how closely you are trying to represent relational table structures. If your diagram is a _logical_ model which is not meant to imply a relational implementation, then it is better to leave these out because the associative relationships already convey the way that entities are associated. For example, a JSON data structure can implement a one-to-many relationship without the need for foreign key properties, using arrays. Similarly an object-oriented programming language may use pointers or references to collections. Even for models that are intended for relational implementation, you might decide that inclusion of foreign key attributes duplicates information already portrayed by the relationships, and does not add meaning to entities. Ultimately, it's your choice.\n\n## Syntax\n\n### Entities and Relationships\n\nMermaid syntax for ER diagrams is compatible with PlantUML, with an extension to label the relationship. Each statement consists of the following parts:\n\n```\n    <first-entity> [<relationship> <second-entity> : <relationship-label>]\n```\n\nWhere:\n\n- `first-entity` is the name of an entity. Names must begin with an alphabetic character or an underscore (from v10.5.0+), and may also contain digits and hyphens.\n- `relationship` describes the way that both entities inter-relate. See below.\n- `second-entity` is the name of the other entity.\n- `relationship-label` describes the relationship from the perspective of the first entity.\n\nFor example:\n\n```\n    PROPERTY ||--|{ ROOM : contains\n```\n\nThis statement can be read as _a property contains one or more rooms, and a room is part of one and only one property_. You can see that the label here is from the first entity's perspective: a property contains a room, but a room does not contain a property. When considered from the perspective of the second entity, the equivalent label is usually very easy to infer. (Some ER diagrams label relationships from both perspectives, but this is not supported here, and is usually superfluous).\n\nOnly the `first-entity` part of a statement is mandatory. This makes it possible to show an entity with no relationships, which can be useful during iterative construction of diagrams. If any other parts of a statement are specified, then all parts are mandatory.\n\n### Relationship Syntax\n\nThe `relationship` part of each statement can be broken down into three sub-components:\n\n- the cardinality of the first entity with respect to the second\n- whether the relationship confers identity on a 'child' entity\n- the cardinality of the second entity with respect to the first\n\nCardinality is a property that describes how many elements of another entity can be related to the entity in question. In the above example a `PROPERTY` can have one or more `ROOM` instances associated to it, whereas a `ROOM` can only be associated with one `PROPERTY`. In each cardinality marker there are two characters. The outermost character represents a maximum value, and the innermost character represents a minimum value. The table below summarises possible cardinalities.\n\n| Value (left) | Value (right) | Meaning                       |\n| :----------: | :-----------: | ----------------------------- |\n|    `\\|o`     |     `o\\|`     | Zero or one                   |\n|    `\\|\\|`    |    `\\|\\|`     | Exactly one                   |\n|     `}o`     |     `o{`      | Zero or more (no upper limit) |\n|    `}\\|`     |     `\\|{`     | One or more (no upper limit)  |\n\n**Aliases**\n\n| Value (left) | Value (right) | Alias for    |\n| :----------: | :-----------: | ------------ |\n| one or zero  |  one or zero  | Zero or one  |\n| zero or one  |  zero or one  | Zero or one  |\n| one or more  |  one or more  | One or more  |\n| one or many  |  one or many  | One or more  |\n|   many(1)    |    many(1)    | One or more  |\n|      1+      |      1+       | One or more  |\n| zero or more | zero or more  | Zero or more |\n| zero or many | zero or many  | Zero or more |\n|   many(0)    |    many(1)    | Zero or more |\n|      0+      |      0+       | Zero or more |\n|   only one   |   only one    | Exactly one  |\n|      1       |       1       | Exactly one  |\n\n### Identification\n\nRelationships may be classified as either _identifying_ or _non-identifying_ and these are rendered with either solid or dashed lines respectively. This is relevant when one of the entities in question can not have independent existence without the other. For example a firm that insures people to drive cars might need to store data on `NAMED-DRIVER`s. In modelling this we might start out by observing that a `CAR` can be driven by many `PERSON` instances, and a `PERSON` can drive many `CAR`s - both entities can exist without the other, so this is a non-identifying relationship that we might specify in Mermaid as: `PERSON }|..|{ CAR : \"driver\"`. Note the two dots in the middle of the relationship that will result in a dashed line being drawn between the two entities. But when this many-to-many relationship is resolved into two one-to-many relationships, we observe that a `NAMED-DRIVER` cannot exist without both a `PERSON` and a `CAR` - the relationships become identifying and would be specified using hyphens, which translate to a solid line:\n\n**Aliases**\n\n|     Value     |     Alias for     |\n| :-----------: | :---------------: |\n|      to       |   _identifying_   |\n| optionally to | _non-identifying_ |\n\n```mermaid\nerDiagram\n    CAR ||--o{ NAMED-DRIVER : allows\n    PERSON ||--o{ NAMED-DRIVER : is\n```\n\n### Attributes\n\nAttributes can be defined for entities by specifying the entity name followed by a block containing multiple `type name` pairs, where a block is delimited by an opening `{` and a closing `}`. The attributes are rendered inside the entity boxes. For example:\n\n```mermaid-example\nerDiagram\n    CAR ||--o{ NAMED-DRIVER : allows\n    CAR {\n        string registrationNumber\n        string make\n        string model\n    }\n    PERSON ||--o{ NAMED-DRIVER : is\n    PERSON {\n        string firstName\n        string lastName\n        int age\n    }\n```\n\nThe `type` values must begin with an alphabetic character and may contain digits, hyphens, underscores, parentheses and square brackets. The `name` values follow a similar format to `type`, but may start with an asterisk as another option to indicate an attribute is a primary key. Other than that, there are no restrictions, and there is no implicit set of valid data types.\n\n### Entity Name Aliases (v10.5.0+)\n\nAn alias can be added to an entity using square brackets. If provided, the alias will be showed in the diagram instead of the entity name.\n\n```mermaid-example\nerDiagram\n    p[Person] {\n        string firstName\n        string lastName\n    }\n    a[\"Customer Account\"] {\n        string email\n    }\n    p ||--o| a : has\n```\n\n#### Attribute Keys and Comments\n\nAttributes may also have a `key` or comment defined. Keys can be `PK`, `FK` or `UK`, for Primary Key, Foreign Key or Unique Key. To specify multiple key constraints on a single attribute, separate them with a comma (e.g., `PK, FK`). A `comment` is defined by double quotes at the end of an attribute. Comments themselves cannot have double-quote characters in them.\n\n```mermaid-example\nerDiagram\n    CAR ||--o{ NAMED-DRIVER : allows\n    CAR {\n        string registrationNumber PK\n        string make\n        string model\n        string[] parts\n    }\n    PERSON ||--o{ NAMED-DRIVER : is\n    PERSON {\n        string driversLicense PK \"The license #\"\n        string(99) firstName \"Only 99 characters are allowed\"\n        string lastName\n        string phone UK\n        int age\n    }\n    NAMED-DRIVER {\n        string carRegistrationNumber PK, FK\n        string driverLicence PK, FK\n    }\n    MANUFACTURER only one to zero or more CAR : makes\n```\n\n### Other Things\n\n- If you want the relationship label to be more than one word, you must use double quotes around the phrase\n- If you don't want a label at all on a relationship, you must use an empty double-quoted string\n\n## Styling\n\n### Config options\n\nFor simple color customization:\n\n| Name     | Used as                                                              |\n| :------- | :------------------------------------------------------------------- |\n| `fill`   | Background color of an entity or attribute                           |\n| `stroke` | Border color of an entity or attribute, line color of a relationship |\n\n### Classes used\n\nThe following CSS class selectors are available for richer styling:\n\n| Selector                   | Description                                           |\n| :------------------------- | :---------------------------------------------------- |\n| `.er.attributeBoxEven`     | The box containing attributes on even-numbered rows   |\n| `.er.attributeBoxOdd`      | The box containing attributes on odd-numbered rows    |\n| `.er.entityBox`            | The box representing an entity                        |\n| `.er.entityLabel`          | The label for an entity                               |\n| `.er.relationshipLabel`    | The label for a relationship                          |\n| `.er.relationshipLabelBox` | The box surrounding a relationship label              |\n| `.er.relationshipLine`     | The line representing a relationship between entities |\n\n<!--- cspell:locale en,en-gb --->\n", "Mindmap": "# Mindmap\n\n> Mindmap: This is an experimental diagram for now. The syntax and properties can change in future releases. The syntax is stable except for the icon integration which is the experimental part.\n\n\"A mind map is a diagram used to visually organize information into a hierarchy, showing relationships among pieces of the whole. It is often created around a single concept, drawn as an image in the center of a blank page, to which associated representations of ideas such as images, words and parts of words are added. Major ideas are connected directly to the central concept, and other ideas branch out from those major ideas.\" Wikipedia\n\n### An example of a mindmap.\n\n```mermaid\nmindmap\n  root((mindmap))\n    Origins\n      Long history\n      ::icon(fa fa-book)\n      Popularisation\n        British popular psychology author Tony Buzan\n    Research\n      On effectiveness<br/>and features\n      On Automatic creation\n        Uses\n            Creative techniques\n            Strategic planning\n            Argument mapping\n    Tools\n      Pen and paper\n      Mermaid\n\n```\n\n## Syntax\n\nThe syntax for creating Mindmaps is simple and relies on indentation for setting the levels in the hierarchy.\n\nIn the following example you can see how there are 3 different levels. One with starting at the left of the text and another level with two rows starting at the same column, defining the node A. At the end there is one more level where the text is indented further than the previous lines defining the nodes B and C.\n\n```\nmindmap\n    Root\n        A\n            B\n            C\n```\n\nIn summary is a simple text outline where there is one node at the root level called `Root` which has one child `A`. `A` in turn has two children `B`and `C`. In the diagram below we can see this rendered as a mindmap.\n\n```mermaid\nmindmap\nRoot\n    A\n      B\n      C\n```\n\nIn this way we can use a text outline to generate a hierarchical mindmap.\n\n## Different shapes\n\nMermaid mindmaps can show nodes using different shapes. When specifying a shape for a node the syntax is similar to flowchart nodes, with an id followed by the shape definition and with the text within the shape delimiters. Where possible we try/will try to keep the same shapes as for flowcharts, even though they are not all supported from the start.\n\nMindmap can show the following shapes:\n\n### Square\n\n```mermaid-example\nmindmap\n    id[I am a square]\n```\n\n### Rounded square\n\n```mermaid-example\nmindmap\n    id(I am a rounded square)\n```\n\n### Circle\n\n```mermaid-example\nmindmap\n    id((I am a circle))\n```\n\n### Bang\n\n```mermaid-example\nmindmap\n    id))I am a bang((\n```\n\n### Cloud\n\n```mermaid-example\nmindmap\n    id)I am a cloud(\n```\n\n### Hexagon\n\n```mermaid-example\nmindmap\n    id{{I am a hexagon}}\n```\n\n### Default\n\n```mermaid-example\nmindmap\n    I am the default shape\n```\n\nMore shapes will be added, beginning with the shapes available in flowcharts.\n\n# Icons and classes\n\n## Icons\n\nAs with flowcharts you can add icons to your nodes but with an updated syntax. The styling for the font based icons are added during the integration so that they are available for the web page. _This is not something a diagram author can do but has to be done with the site administrator or the integrator_. Once the icon fonts are in place you add them to the mind map nodes using the `::icon()` syntax. You place the classes for the icon within the parenthesis like in the following example where icons for material design and [Font Awesome 5](https://fontawesome.com/v5/search?o=r&m=free) are displayed. The intention is that this approach should be used for all diagrams supporting icons. **Experimental feature:** This wider scope is also the reason Mindmaps are experimental as this syntax and approach could change.\n\n```mermaid-example\nmindmap\n    Root\n        A\n        ::icon(fa fa-book)\n        B(B)\n        ::icon(mdi mdi-skull-outline)\n```\n\n## Classes\n\nAgain the syntax for adding classes is similar to flowcharts. You can add classes using a triple colon following a number of css classes separated by space. In the following example one of the nodes has two custom classes attached urgent turning the background red and the text white and large increasing the font size:\n\n```mermaid-example\nmindmap\n    Root\n        A[A]\n        :::urgent large\n        B(B)\n        C\n```\n\n_These classes need to be supplied by the site administrator._\n\n## Unclear indentation\n\nThe actual indentation does not really matter only compared with the previous rows. If we take the previous example and disrupt it a little we can see how the calculations are performed. Let us start with placing C with a smaller indentation than `B` but larger then `A`.\n\n```\nmindmap\n    Root\n        A\n            B\n          C\n```\n\nThis outline is unclear as `B` clearly is a child of `A` but when we move on to `C` the clarity is lost. `C` is not a child of `B` with a higher indentation nor does it have the same indentation as `B`. The only thing that is clear is that the first node with smaller indentation, indicating a parent, is A. Then Mermaid relies on this known truth and compensates for the unclear indentation and selects `A` as a parent of `C` leading till the same diagram with `B` and `C` as siblings.\n\n```mermaid\nmindmap\nRoot\n    A\n        B\n      C\n```\n\n## Markdown Strings\n\nThe \"Markdown Strings\" feature enhances mind maps by offering a more versatile string type, which supports text formatting options such as bold and italics, and automatically wraps text within labels.\n\n```mermaid-example\nmindmap\n    id1[\"`**Root** with\na second line\nUnicode works too: 🤓`\"]\n      id2[\"`The dog in **the** hog... a *very long text* that wraps to a new line`\"]\n      id3[Regular labels still works]\n```\n\nFormatting:\n\n- For bold text, use double asterisks \\*\\* before and after the text.\n- For italics, use single asterisks \\* before and after the text.\n- With traditional strings, you needed to add <br> tags for text to wrap in nodes. However, markdown strings automatically wrap text when it becomes too long and allows you to start a new line by simply using a newline character instead of a <br> tag.\n\n## Integrating with your library/website.\n\nMindmap uses the experimental lazy loading & async rendering features which could change in the future. From version 9.4.0 this diagram is included in mermaid but use lazy loading in order to keep the size of mermaid down. This is important in order to be able to add additional diagrams going forward.\n\nYou can still use the pre 9.4.0 method to add mermaid with mindmaps to a web page:\n\n```html\n<script type=\"module\">\n  import mermaid from '<CDN_URL>/mermaid@9.3.0/dist/mermaid.esm.min.mjs';\n  import mindmap from '<CDN_URL>/@mermaid-js/mermaid-mindmap@9.3.0/dist/mermaid-mindmap.esm.min.mjs';\n  await mermaid.registerExternalDiagrams([mindmap]);\n</script>\n```\n\nFrom version 9.4.0 you can simplify this code to:\n\n```html\n<script type=\"module\">\n  import mermaid from '<CDN_URL>/mermaid@<MERMAID_VERSION>/dist/mermaid.esm.min.mjs';\n</script>\n```\n\nYou can also refer the implementation in the live editor [here](https://github.com/mermaid-js/mermaid-live-editor/blob/develop/src/lib/util/mermaid.ts) to see how the async loading is done.\n\n<!---\ncspell:locale en,en-gb\ncspell:ignore Buzan\n--->\n", "Sequence Diagram": "# Sequence diagrams\n\n> A Sequence diagram is an interaction diagram that shows how processes operate with one another and in what order.\n\nMermaid can render sequence diagrams.\n\n```mermaid-example\nsequenceDiagram\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n    Alice-)John: See you later!\n```\n\n```note\nA note on nodes, the word \"end\" could potentially break the diagram, due to the way that the mermaid language is scripted.\n\nIf unavoidable, one must use parentheses(), quotation marks \"\", or brackets {},[], to enclose the word \"end\". i.e : (end), [end], {end}.\n```\n\n## Syntax\n\n### Participants\n\nThe participants can be defined implicitly as in the first example on this page. The participants or actors are\nrendered in order of appearance in the diagram source text. Sometimes you might want to show the participants in a\ndifferent order than how they appear in the first message. It is possible to specify the actor's order of\nappearance by doing the following:\n\n```mermaid-example\nsequenceDiagram\n    participant Alice\n    participant Bob\n    Bob->>Alice: Hi Alice\n    Alice->>Bob: Hi Bob\n```\n\n### Actors\n\nIf you specifically want to use the actor symbol instead of a rectangle with text you can do so by using actor statements as per below.\n\n```mermaid-example\nsequenceDiagram\n    actor Alice\n    actor Bob\n    Alice->>Bob: Hi Bob\n    Bob->>Alice: Hi Alice\n```\n\n### Aliases\n\nThe actor can have a convenient identifier and a descriptive label.\n\n```mermaid-example\nsequenceDiagram\n    participant A as Alice\n    participant J as John\n    A->>J: Hello John, how are you?\n    J->>A: Great!\n```\n\n### Actor Creation and Destruction (v10.3.0+)\n\nIt is possible to create and destroy actors by messages. To do so, add a create or destroy directive before the message.\n\n```\ncreate participant B\nA --> B: Hello\n```\n\nCreate directives support actor/participant distinction and aliases. The sender or the recipient of a message can be destroyed but only the recipient can be created.\n\n```mermaid-example\nsequenceDiagram\n    Alice->>Bob: Hello Bob, how are you ?\n    Bob->>Alice: Fine, thank you. And you?\n    create participant Carl\n    Alice->>Carl: Hi Carl!\n    create actor D as Donald\n    Carl->>D: Hi!\n    destroy Carl\n    Alice-xCarl: We are too many\n    destroy Bob\n    Bob->>Alice: I agree\n```\n\n#### Unfixable actor/participant creation/deletion error\n\nIf an error of the following type occurs when creating or deleting an actor/participant:\n\n> The destroyed participant **participant-name** does not have an associated destroying message after its declaration. Please check the sequence diagram.\n\nAnd fixing diagram code does not get rid of this error and rendering of all other diagrams results in the same error, then you need to update the mermaid version to (v10.7.0+).\n\n### Grouping / Box\n\nThe actor(s) can be grouped in vertical boxes. You can define a color (if not, it will be transparent) and/or a descriptive label using the following notation:\n\n```\nbox Aqua Group Description\n... actors ...\nend\nbox Group without description\n... actors ...\nend\nbox rgb(33,66,99)\n... actors ...\nend\n```\n\n```note\nIf your group name is a color you can force the color to be transparent:\n```\n\n```\nbox transparent Aqua\n... actors ...\nend\n```\n\n```mermaid-example\n    sequenceDiagram\n    box Purple Alice & John\n    participant A\n    participant J\n    end\n    box Another Group\n    participant B\n    participant C\n    end\n    A->>J: Hello John, how are you?\n    J->>A: Great!\n    A->>B: Hello Bob, how is Charley?\n    B->>C: Hello Charley, how are you?\n```\n\n## Messages\n\nMessages can be of two displayed either solid or with a dotted line.\n\n```\n[Actor][Arrow][Actor]:Message text\n```\n\nThere are six types of arrows currently supported:\n\n| Type   | Description                                      |\n| ------ | ------------------------------------------------ |\n| `->`   | Solid line without arrow                         |\n| `-->`  | Dotted line without arrow                        |\n| `->>`  | Solid line with arrowhead                        |\n| `-->>` | Dotted line with arrowhead                       |\n| `-x`   | Solid line with a cross at the end               |\n| `--x`  | Dotted line with a cross at the end.             |\n| `-)`   | Solid line with an open arrow at the end (async) |\n| `--)`  | Dotted line with a open arrow at the end (async) |\n\n## Activations\n\nIt is possible to activate and deactivate an actor. (de)activation can be dedicated declarations:\n\n```mermaid-example\nsequenceDiagram\n    Alice->>John: Hello John, how are you?\n    activate John\n    John-->>Alice: Great!\n    deactivate John\n```\n\nThere is also a shortcut notation by appending `+`/`-` suffix to the message arrow:\n\n```mermaid-example\nsequenceDiagram\n    Alice->>+John: Hello John, how are you?\n    John-->>-Alice: Great!\n```\n\nActivations can be stacked for same actor:\n\n```mermaid-example\nsequenceDiagram\n    Alice->>+John: Hello John, how are you?\n    Alice->>+John: John, can you hear me?\n    John-->>-Alice: Hi Alice, I can hear you!\n    John-->>-Alice: I feel great!\n```\n\n## Notes\n\nIt is possible to add notes to a sequence diagram. This is done by the notation\nNote [ right of | left of | over ] [Actor]: Text in note content\n\nSee the example below:\n\n```mermaid-example\nsequenceDiagram\n    participant John\n    Note right of John: Text in note\n```\n\nIt is also possible to create notes spanning two participants:\n\n```mermaid-example\nsequenceDiagram\n    Alice->John: Hello John, how are you?\n    Note over Alice,John: A typical interaction\n```\n\nIt is also possible to add a line break (applies to text input in general):\n\n```mermaid-example\nsequenceDiagram\n    Alice->John: Hello John, how are you?\n    Note over Alice,John: A typical interaction<br/>But now in two lines\n```\n\n## Loops\n\nIt is possible to express loops in a sequence diagram. This is done by the notation\n\n```\nloop Loop text\n... statements ...\nend\n```\n\nSee the example below:\n\n```mermaid-example\nsequenceDiagram\n    Alice->John: Hello John, how are you?\n    loop Every minute\n        John-->Alice: Great!\n    end\n```\n\n## Alt\n\nIt is possible to express alternative paths in a sequence diagram. This is done by the notation\n\n```\nalt Describing text\n... statements ...\nelse\n... statements ...\nend\n```\n\nor if there is sequence that is optional (if without else).\n\n```\nopt Describing text\n... statements ...\nend\n```\n\nSee the example below:\n\n```mermaid-example\nsequenceDiagram\n    Alice->>Bob: Hello Bob, how are you?\n    alt is sick\n        Bob->>Alice: Not so good :(\n    else is well\n        Bob->>Alice: Feeling fresh like a daisy\n    end\n    opt Extra response\n        Bob->>Alice: Thanks for asking\n    end\n```\n\n## Parallel\n\nIt is possible to show actions that are happening in parallel.\n\nThis is done by the notation\n\n```\npar [Action 1]\n... statements ...\nand [Action 2]\n... statements ...\nand [Action N]\n... statements ...\nend\n```\n\nSee the example below:\n\n```mermaid-example\nsequenceDiagram\n    par Alice to Bob\n        Alice->>Bob: Hello guys!\n    and Alice to John\n        Alice->>John: Hello guys!\n    end\n    Bob-->>Alice: Hi Alice!\n    John-->>Alice: Hi Alice!\n```\n\nIt is also possible to nest parallel blocks.\n\n```mermaid-example\nsequenceDiagram\n    par Alice to Bob\n        Alice->>Bob: Go help John\n    and Alice to John\n        Alice->>John: I want this done today\n        par John to Charlie\n            John->>Charlie: Can we do this today?\n        and John to Diana\n            John->>Diana: Can you help us today?\n        end\n    end\n```\n\n## Critical Region\n\nIt is possible to show actions that must happen automatically with conditional handling of circumstances.\n\nThis is done by the notation\n\n```\ncritical [Action that must be performed]\n... statements ...\noption [Circumstance A]\n... statements ...\noption [Circumstance B]\n... statements ...\nend\n```\n\nSee the example below:\n\n```mermaid-example\nsequenceDiagram\n    critical Establish a connection to the DB\n        Service-->DB: connect\n    option Network timeout\n        Service-->Service: Log error\n    option Credentials rejected\n        Service-->Service: Log different error\n    end\n```\n\nIt is also possible to have no options at all\n\n```mermaid-example\nsequenceDiagram\n    critical Establish a connection to the DB\n        Service-->DB: connect\n    end\n```\n\nThis critical block can also be nested, equivalently to the `par` statement as seen above.\n\n## Break\n\nIt is possible to indicate a stop of the sequence within the flow (usually used to model exceptions).\n\nThis is done by the notation\n\n```\nbreak [something happened]\n... statements ...\nend\n```\n\nSee the example below:\n\n```mermaid-example\nsequenceDiagram\n    Consumer-->API: Book something\n    API-->BookingService: Start booking process\n    break when the booking process fails\n        API-->Consumer: show failure\n    end\n    API-->BillingService: Start billing process\n```\n\n## Background Highlighting\n\nIt is possible to highlight flows by providing colored background rects. This is done by the notation\n\nThe colors are defined using rgb and rgba syntax.\n\n```\nrect rgb(0, 255, 0)\n... content ...\nend\n```\n\n```\nrect rgba(0, 0, 255, .1)\n... content ...\nend\n```\n\nSee the examples below:\n\n```mermaid-example\nsequenceDiagram\n    participant Alice\n    participant John\n\n    rect rgb(191, 223, 255)\n    note right of Alice: Alice calls John.\n    Alice->>+John: Hello John, how are you?\n    rect rgb(200, 150, 255)\n    Alice->>+John: John, can you hear me?\n    John-->>-Alice: Hi Alice, I can hear you!\n    end\n    John-->>-Alice: I feel great!\n    end\n    Alice ->>+ John: Did you want to go to the game tonight?\n    John -->>- Alice: Yeah! See you there.\n\n```\n\n## Comments\n\nComments can be entered within a sequence diagram, which will be ignored by the parser. Comments need to be on their own line, and must be prefaced with `%%` (double percent signs). Any text after the start of the comment to the next newline will be treated as a comment, including any diagram syntax\n\n```mermaid\nsequenceDiagram\n    Alice->>John: Hello John, how are you?\n    %% this is a comment\n    John-->>Alice: Great!\n```\n\n## Entity codes to escape characters\n\nIt is possible to escape characters using the syntax exemplified here.\n\n```mermaid-example\nsequenceDiagram\n    A->>B: I #9829; you!\n    B->>A: I #9829; you #infin; times more!\n```\n\nNumbers given are base 10, so `#` can be encoded as `#35;`. It is also supported to use HTML character names.\n\nBecause semicolons can be used instead of line breaks to define the markup, you need to use `#59;` to include a semicolon in message text.\n\n## sequenceNumbers\n\nIt is possible to get a sequence number attached to each arrow in a sequence diagram. This can be configured when adding mermaid to the website as shown below:\n\n```html\n<script>\n  mermaid.initialize({ sequence: { showSequenceNumbers: true } });\n</script>\n```\n\nIt can also be turned on via the diagram code as in the diagram:\n\n```mermaid-example\nsequenceDiagram\n    autonumber\n    Alice->>John: Hello John, how are you?\n    loop HealthCheck\n        John->>John: Fight against hypochondria\n    end\n    Note right of John: Rational thoughts!\n    John-->>Alice: Great!\n    John->>Bob: How about you?\n    Bob-->>John: Jolly good!\n```\n\n## Actor Menus\n\nActors can have popup-menus containing individualized links to external pages. For example, if an actor represented a web service, useful links might include a link to the service health dashboard, repo containing the code for the service, or a wiki page describing the service.\n\nThis can be configured by adding one or more link lines with the format:\n\n```\nlink <actor>: <link-label> @ <link-url>\n```\n\n```mermaid\nsequenceDiagram\n    participant Alice\n    participant John\n    link Alice: Dashboard @ https://dashboard.contoso.com/alice\n    link Alice: Wiki @ https://wiki.contoso.com/alice\n    link John: Dashboard @ https://dashboard.contoso.com/john\n    link John: Wiki @ https://wiki.contoso.com/john\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n    Alice-)John: See you later!\n```\n\n#### Advanced Menu Syntax\n\nThere is an advanced syntax that relies on JSON formatting. If you are comfortable with JSON format, then this exists as well.\n\nThis can be configured by adding the links lines with the format:\n\n```\nlinks <actor>: <json-formatted link-name link-url pairs>\n```\n\nAn example is below:\n\n```mermaid-example\nsequenceDiagram\n    participant Alice\n    participant John\n    links Alice: {\"Dashboard\": \"https://dashboard.contoso.com/alice\", \"Wiki\": \"https://wiki.contoso.com/alice\"}\n    links John: {\"Dashboard\": \"https://dashboard.contoso.com/john\", \"Wiki\": \"https://wiki.contoso.com/john\"}\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n    Alice-)John: See you later!\n```\n\n## Styling\n\nStyling of a sequence diagram is done by defining a number of css classes. During rendering these classes are extracted from the file located at src/themes/sequence.scss\n\n### Classes used\n\n| Class          | Description                                                    |\n| -------------- | -------------------------------------------------------------- |\n| actor          | Styles for the actor box.                                      |\n| actor-top      | Styles for the actor figure/ box at the top of the diagram.    |\n| actor-bottom   | Styles for the actor figure/ box at the bottom of the diagram. |\n| text.actor     | Styles for text of all of the actors.                          |\n| text.actor-box | Styles for text of the actor box.                              |\n| text.actor-man | Styles for text of the actor figure.                           |\n| actor-line     | The vertical line for an actor.                                |\n| messageLine0   | Styles for the solid message line.                             |\n| messageLine1   | Styles for the dotted message line.                            |\n| messageText    | Defines styles for the text on the message arrows.             |\n| labelBox       | Defines styles label to left in a loop.                        |\n| labelText      | Styles for the text in label for loops.                        |\n| loopText       | Styles for the text in the loop box.                           |\n| loopLine       | Defines styles for the lines in the loop box.                  |\n| note           | Styles for the note box.                                       |\n| noteText       | Styles for the text on in the note boxes.                      |\n\n### Sample stylesheet\n\n```css\nbody {\n  background: white;\n}\n\n.actor {\n  stroke: #ccccff;\n  fill: #ececff;\n}\ntext.actor {\n  fill: black;\n  stroke: none;\n  font-family: Helvetica;\n}\n\n.actor-line {\n  stroke: grey;\n}\n\n.messageLine0 {\n  stroke-width: 1.5;\n  stroke-dasharray: '2 2';\n  marker-end: 'url(#arrowhead)';\n  stroke: black;\n}\n\n.messageLine1 {\n  stroke-width: 1.5;\n  stroke-dasharray: '2 2';\n  stroke: black;\n}\n\n#arrowhead {\n  fill: black;\n}\n\n.messageText {\n  fill: black;\n  stroke: none;\n  font-family: 'trebuchet ms', verdana, arial;\n  font-size: 14px;\n}\n\n.labelBox {\n  stroke: #ccccff;\n  fill: #ececff;\n}\n\n.labelText {\n  fill: black;\n  stroke: none;\n  font-family: 'trebuchet ms', verdana, arial;\n}\n\n.loopText {\n  fill: black;\n  stroke: none;\n  font-family: 'trebuchet ms', verdana, arial;\n}\n\n.loopLine {\n  stroke-width: 2;\n  stroke-dasharray: '2 2';\n  marker-end: 'url(#arrowhead)';\n  stroke: #ccccff;\n}\n\n.note {\n  stroke: #decc93;\n  fill: #fff5ad;\n}\n\n.noteText {\n  fill: black;\n  stroke: none;\n  font-family: 'trebuchet ms', verdana, arial;\n  font-size: 14px;\n}\n```\n\n## Configuration\n\nIt is possible to adjust the margins for rendering the sequence diagram.\n\nThis is done by defining `mermaid.sequenceConfig` or by the CLI to use a json file with the configuration.\nHow to use the CLI is described in the [mermaidCLI](../config/mermaidCLI.md) page.\n`mermaid.sequenceConfig` can be set to a JSON string with config parameters or the corresponding object.\n\n```javascript\nmermaid.sequenceConfig = {\n  diagramMarginX: 50,\n  diagramMarginY: 10,\n  boxTextMargin: 5,\n  noteMargin: 10,\n  messageMargin: 35,\n  mirrorActors: true,\n};\n```\n\n### Possible configuration parameters:\n\n| Parameter         | Description                                                                                                                                | Default value                  |\n| ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------ |\n| mirrorActors      | Turns on/off the rendering of actors below the diagram as well as above it                                                                 | false                          |\n| bottomMarginAdj   | Adjusts how far down the graph ended. Wide borders styles with css could generate unwanted clipping which is why this config param exists. | 1                              |\n| actorFontSize     | Sets the font size for the actor's description                                                                                             | 14                             |\n| actorFontFamily   | Sets the font family for the actor's description                                                                                           | \"Open Sans\", sans-serif        |\n| actorFontWeight   | Sets the font weight for the actor's description                                                                                           | \"Open Sans\", sans-serif        |\n| noteFontSize      | Sets the font size for actor-attached notes                                                                                                | 14                             |\n| noteFontFamily    | Sets the font family for actor-attached notes                                                                                              | \"trebuchet ms\", verdana, arial |\n| noteFontWeight    | Sets the font weight for actor-attached notes                                                                                              | \"trebuchet ms\", verdana, arial |\n| noteAlign         | Sets the text alignment for text in actor-attached notes                                                                                   | center                         |\n| messageFontSize   | Sets the font size for actor<->actor messages                                                                                              | 16                             |\n| messageFontFamily | Sets the font family for actor<->actor messages                                                                                            | \"trebuchet ms\", verdana, arial |\n| messageFontWeight | Sets the font weight for actor<->actor messages                                                                                            | \"trebuchet ms\", verdana, arial |\n", "Timeline Diagram": "# Timeline Diagram\n\n> Timeline: This is an experimental diagram for now. The syntax and properties can change in future releases. The syntax is stable except for the icon integration which is the experimental part.\n\n\"A timeline is a type of diagram used to illustrate a chronology of events, dates, or periods of time. It is usually presented graphically to indicate the passing of time, and it is usually organized chronologically. A basic timeline presents a list of events in chronological order, usually using dates as markers. A timeline can also be used to show the relationship between events, such as the relationship between the events of a person's life\" [(Wikipedia)](https://en.wikipedia.org/wiki/Timeline).\n\n### An example of a timeline\n\n```mermaid\ntimeline\n    title History of Social Media Platform\n    2002 : LinkedIn\n    2004 : Facebook\n         : Google\n    2005 : Youtube\n    2006 : Twitter\n```\n\n## Syntax\n\nThe syntax for creating Timeline diagram is simple. You always start with the `timeline` keyword to let mermaid know that you want to create a timeline diagram.\n\nAfter that there is a possibility to add a title to the timeline. This is done by adding a line with the keyword `title` followed by the title text.\n\nThen you add the timeline data, where you always start with a time period, followed by a colon and then the text for the event. Optionally you can add a second colon and then the text for the event. So, you can have one or more events per time period.\n\n```json\n{time period} : {event}\n```\n\nor\n\n```json\n{time period} : {event} : {event}\n```\n\nor\n\n```json\n{time period} : {event}\n              : {event}\n              : {event}\n```\n\n**NOTE**: Both time period and event are simple text, and not limited to numbers.\n\nLet us look at the syntax for the example above.\n\n```mermaid-example\ntimeline\n    title History of Social Media Platform\n    2002 : LinkedIn\n    2004 : Facebook : Google\n    2005 : Youtube\n    2006 : Twitter\n```\n\nIn this way we can use a text outline to generate a timeline diagram.\nThe sequence of time period and events is important, as it will be used to draw the timeline. The first time period will be placed at the left side of the timeline, and the last time period will be placed at the right side of the timeline.\n\nSimilarly, the first event will be placed at the top for that specific time period, and the last event will be placed at the bottom.\n\n## Grouping of time periods in sections/ages\n\nYou can group time periods in sections/ages. This is done by adding a line with the keyword `section` followed by the section name.\n\nAll subsequent time periods will be placed in this section until a new section is defined.\n\nIf no section is defined, all time periods will be placed in the default section.\n\nLet us look at an example, where we have grouped the time periods in sections.\n\n```mermaid-example\ntimeline\n    title Timeline of Industrial Revolution\n    section 17th-20th century\n        Industry 1.0 : Machinery, Water power, Steam <br>power\n        Industry 2.0 : Electricity, Internal combustion engine, Mass production\n        Industry 3.0 : Electronics, Computers, Automation\n    section 21st century\n        Industry 4.0 : Internet, Robotics, Internet of Things\n        Industry 5.0 : Artificial intelligence, Big data, 3D printing\n```\n\nAs you can see, the time periods are placed in the sections, and the sections are placed in the order they are defined.\n\nAll time periods and events under a given section follow a similar color scheme. This is done to make it easier to see the relationship between time periods and events.\n\n## Wrapping of text for long time-periods or events\n\nBy default, the text for time-periods and events will be wrapped if it is too long. This is done to avoid that the text is drawn outside the diagram.\n\nYou can also use `<br>` to force a line break.\n\nLet us look at another example, where we have a long time period, and a long event.\n\n```mermaid-example\ntimeline\n        title England's History Timeline\n        section Stone Age\n          7600 BC : Britain's oldest known house was built in Orkney, Scotland\n          6000 BC : Sea levels rise and Britain becomes an island.<br> The people who live here are hunter-gatherers.\n        section Bronze Age\n          2300 BC : People arrive from Europe and settle in Britain. <br>They bring farming and metalworking.\n                  : New styles of pottery and ways of burying the dead appear.\n          2200 BC : The last major building works are completed at Stonehenge.<br> People now bury their dead in stone circles.\n                  : The first metal objects are made in Britain.Some other nice things happen. it is a good time to be alive.\n\n```\n\n```mermaid-example\ntimeline\n        title MermaidChart 2023 Timeline\n        section 2023 Q1 <br> Release Personal Tier\n          Bullet 1 : sub-point 1a : sub-point 1b\n               : sub-point 1c\n          Bullet 2 : sub-point 2a : sub-point 2b\n        section 2023 Q2 <br> Release XYZ Tier\n          Bullet 3 : sub-point <br> 3a : sub-point 3b\n               : sub-point 3c\n          Bullet 4 : sub-point 4a : sub-point 4b\n```\n\n## Styling of time periods and events\n\nAs explained earlier, each section has a color scheme, and each time period and event under a section follow the similar color scheme.\n\nHowever, if there is no section defined, then we have two possibilities:\n\n1. Style time periods individually, i.e. each time period(and its corresponding events) will have its own color scheme. This is the DEFAULT behavior.\n\n```mermaid-example\n    timeline\n        title History of Social Media Platform\n          2002 : LinkedIn\n          2004 : Facebook : Google\n          2005 : Youtube\n          2006 : Twitter\n\n```\n\n**NOTE**: that there are no sections defined, and each time period and its corresponding events will have its own color scheme.\n\n2. Disable the multiColor option using the `disableMultiColor` option. This will make all time periods and events follow the same color scheme.\n\nYou will need to add this option either via mermaid.initialize function or directives.\n\n```javascript\nmermaid.initialize({\n        theme: 'base',\n        startOnLoad: true,\n        logLevel: 0,\n        timeline: {\n          disableMulticolor: false,\n        },\n        ...\n        ...\n```\n\nlet us look at same example, where we have disabled the multiColor option.\n\n```mermaid-example\n   %%{init: { 'logLevel': 'debug', 'theme': 'base', 'timeline': {'disableMulticolor': true}}}%%\n    timeline\n        title History of Social Media Platform\n          2002 : LinkedIn\n          2004 : Facebook : Google\n          2005 : Youtube\n          2006 : Twitter\n\n```\n\n### Customizing Color scheme\n\nYou can customize the color scheme using the `cScale0` to `cScale11` theme variables, which will change the background colors. Mermaid allows you to set unique colors for up-to 12 sections, where `cScale0` variable will drive the value of the first section or time-period, `cScale1` will drive the value of the second section and so on.\nIn case you have more than 12 sections, the color scheme will start to repeat.\n\nIf you also want to change the foreground color of a section, you can do so use theme variables corresponding `cScaleLabel0` to `cScaleLabel11` variables.\n\n**NOTE**: Default values for these theme variables are picked from the selected theme. If you want to override the default values, you can use the `initialize` call to add your custom theme variable values.\n\nExample:\n\nNow let's override the default values for the `cScale0` to `cScale2` variables:\n\n```mermaid-example\n    %%{init: { 'logLevel': 'debug', 'theme': 'default' , 'themeVariables': {\n              'cScale0': '#ff0000', 'cScaleLabel0': '#ffffff',\n              'cScale1': '#00ff00',\n              'cScale2': '#0000ff', 'cScaleLabel2': '#ffffff'\n       } } }%%\n       timeline\n        title History of Social Media Platform\n          2002 : LinkedIn\n          2004 : Facebook : Google\n          2005 : Youtube\n          2006 : Twitter\n          2007 : Tumblr\n          2008 : Instagram\n          2010 : Pinterest\n\n```\n\nSee how the colors are changed to the values specified in the theme variables.\n\n## Themes\n\nMermaid supports a bunch of pre-defined themes which you can use to find the right one for you. PS: you can actually override an existing theme's variable to get your own custom theme going. Learn more about theming your diagram [here](../config/theming.md).\n\nThe following are the different pre-defined theme options:\n\n- `base`\n- `forest`\n- `dark`\n- `default`\n- `neutral`\n\n**NOTE**: To change theme you can either use the `initialize` call or _directives_. Learn more about [directives](../config/directives.md)\nLet's put them to use, and see how our sample diagram looks in different themes:\n\n### Base Theme\n\n```mermaid-example\n%%{init: { 'logLevel': 'debug', 'theme': 'base' } }%%\n    timeline\n        title History of Social Media Platform\n          2002 : LinkedIn\n          2004 : Facebook : Google\n          2005 : Youtube\n          2006 : Twitter\n          2007 : Tumblr\n          2008 : Instagram\n          2010 : Pinterest\n```\n\n### Forest Theme\n\n```mermaid-example\n%%{init: { 'logLevel': 'debug', 'theme': 'forest' } }%%\n    timeline\n        title History of Social Media Platform\n          2002 : LinkedIn\n          2004 : Facebook : Google\n          2005 : Youtube\n          2006 : Twitter\n          2007 : Tumblr\n          2008 : Instagram\n          2010 : Pinterest\n```\n\n### Dark Theme\n\n```mermaid-example\n%%{init: { 'logLevel': 'debug', 'theme': 'dark' } }%%\n    timeline\n        title History of Social Media Platform\n          2002 : LinkedIn\n          2004 : Facebook : Google\n          2005 : Youtube\n          2006 : Twitter\n          2007 : Tumblr\n          2008 : Instagram\n          2010 : Pinterest\n```\n\n### Default Theme\n\n```mermaid-example\n%%{init: { 'logLevel': 'debug', 'theme': 'default' } }%%\n    timeline\n        title History of Social Media Platform\n          2002 : LinkedIn\n          2004 : Facebook : Google\n          2005 : Youtube\n          2006 : Twitter\n          2007 : Tumblr\n          2008 : Instagram\n          2010 : Pinterest\n```\n\n### Neutral Theme\n\n```mermaid-example\n%%{init: { 'logLevel': 'debug', 'theme': 'neutral' } }%%\n    timeline\n        title History of Social Media Platform\n          2002 : LinkedIn\n          2004 : Facebook : Google\n          2005 : Youtube\n          2006 : Twitter\n          2007 : Tumblr\n          2008 : Instagram\n          2010 : Pinterest\n```\n\n## Integrating with your library/website\n\nTimeline uses experimental lazy loading & async rendering features which could change in the future.The lazy loading is important in order to be able to add additional diagrams going forward.\n\nYou can use this method to add mermaid including the timeline diagram to a web page:\n\n```html\n<script type=\"module\">\n  import mermaid from '<CDN_URL>/mermaid@<MERMAID_VERSION>/dist/mermaid.esm.min.mjs';\n</script>\n```\n\nYou can also refer the implementation in the live editor [here](https://github.com/mermaid-js/mermaid-live-editor/blob/develop/src/lib/util/mermaid.ts) to see how the async loading is done.\n", "User Journey Diagram": "# User Journey Diagram\n\n> User journeys describe at a high level of detail exactly what steps different users take to complete a specific task within a system, application or website. This technique shows the current (as-is) user workflow, and reveals areas of improvement for the to-be workflow. (Wikipedia)\n\nMermaid can render user journey diagrams:\n\n```mermaid-example\njourney\n    title My working day\n    section Go to work\n      Make tea: 5: Me\n      Go upstairs: 3: Me\n      Do work: 1: Me, Cat\n    section Go home\n      Go downstairs: 5: Me\n      Sit down: 5: Me\n```\n\nEach user journey is split into sections, these describe the part of the task\nthe user is trying to complete.\n\nTasks syntax is `Task name: <score>: <comma separated list of actors>`\n"}